{
    "properties": {
        "editor.tabSize": {
            "type": "number",
            "default": 4,
            "minimum": 1,
            "markdownDescription": "The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
            "defaultDefaultValue": 4,
            "scope": 5,
            "restricted": false
        },
        "editor.indentSize": {
            "anyOf": [
                {
                    "type": "string",
                    "enum": [
                        "tabSize"
                    ]
                },
                {
                    "type": "number",
                    "minimum": 1
                }
            ],
            "default": "tabSize",
            "markdownDescription": "The number of spaces used for indentation or `\"tabSize\"` to use the value from `#editor.tabSize#`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
            "defaultDefaultValue": "tabSize",
            "scope": 5,
            "restricted": false
        },
        "editor.insertSpaces": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.detectIndentation": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.trimAutoWhitespace": {
            "type": "boolean",
            "default": true,
            "description": "Remove trailing auto inserted whitespace.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.largeFileOptimizations": {
            "type": "boolean",
            "default": true,
            "description": "Special handling for large files to disable certain memory intensive features.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.wordBasedSuggestions": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether completions should be computed based on words in the document.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.wordBasedSuggestionsMode": {
            "enum": [
                "currentDocument",
                "matchingDocuments",
                "allDocuments"
            ],
            "default": "matchingDocuments",
            "enumDescriptions": [
                "Only suggest words from the active document.",
                "Suggest words from all open documents of the same language.",
                "Suggest words from all open documents."
            ],
            "description": "Controls from which documents word based completions are computed.",
            "defaultDefaultValue": "matchingDocuments",
            "scope": 5,
            "restricted": false
        },
        "editor.semanticHighlighting.enabled": {
            "enum": [
                true,
                false,
                "configuredByTheme"
            ],
            "enumDescriptions": [
                "Semantic highlighting enabled for all color themes.",
                "Semantic highlighting disabled for all color themes.",
                "Semantic highlighting is configured by the current color theme's `semanticHighlighting` setting."
            ],
            "default": "configuredByTheme",
            "description": "Controls whether the semanticHighlighting is shown for the languages that support it.",
            "defaultDefaultValue": "configuredByTheme",
            "scope": 5,
            "restricted": false
        },
        "editor.stablePeek": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Keep peek editors open even when double-clicking their content or when hitting `Escape`.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.maxTokenizationLineLength": {
            "type": "integer",
            "default": 20000,
            "description": "Lines above this length will not be tokenized for performance reasons",
            "defaultDefaultValue": 20000,
            "scope": 5,
            "restricted": false
        },
        "editor.experimental.asyncTokenization": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether the tokenization should happen asynchronously on a web worker.",
            "tags": [
                "experimental"
            ],
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.experimental.asyncTokenizationLogging": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether async tokenization should be logged. For debugging only.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.experimental.asyncTokenizationVerification": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether async tokenization should be verified against legacy background tokenization. Might slow down tokenization. For debugging only.",
            "tags": [
                "experimental"
            ],
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.language.brackets": {
            "type": [
                "array",
                "null"
            ],
            "default": null,
            "description": "Defines the bracket symbols that increase or decrease the indentation.",
            "items": {
                "type": "array",
                "items": [
                    {
                        "type": "string",
                        "description": "The opening bracket character or string sequence."
                    },
                    {
                        "type": "string",
                        "description": "The closing bracket character or string sequence."
                    }
                ]
            },
            "defaultDefaultValue": null,
            "scope": 5,
            "restricted": false
        },
        "editor.language.colorizedBracketPairs": {
            "type": [
                "array",
                "null"
            ],
            "default": null,
            "description": "Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled.",
            "items": {
                "type": "array",
                "items": [
                    {
                        "type": "string",
                        "description": "The opening bracket character or string sequence."
                    },
                    {
                        "type": "string",
                        "description": "The closing bracket character or string sequence."
                    }
                ]
            },
            "defaultDefaultValue": null,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.maxComputationTime": {
            "type": "number",
            "default": 5000,
            "description": "Timeout in milliseconds after which diff computation is cancelled. Use 0 for no timeout.",
            "defaultDefaultValue": 5000,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.maxFileSize": {
            "type": "number",
            "default": 50,
            "description": "Maximum file size in MB for which to compute diffs. Use 0 for no limit.",
            "defaultDefaultValue": 50,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.renderSideBySide": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the diff editor shows the diff side by side or inline.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.renderSideBySideInlineBreakpoint": {
            "type": "number",
            "default": 900,
            "description": "If the diff editor width is smaller than this value, the inline view is used.",
            "defaultDefaultValue": 900,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.useInlineViewWhenSpaceIsLimited": {
            "type": "boolean",
            "default": true,
            "description": "If enabled and the editor width is too small, the inline view is used.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.renderMarginRevertIcon": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, the diff editor shows arrows in its glyph margin to revert changes.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.ignoreTrimWhitespace": {
            "type": "boolean",
            "default": true,
            "description": "When enabled, the diff editor ignores changes in leading or trailing whitespace.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.renderIndicators": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the diff editor shows +/- indicators for added/removed changes.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.codeLens": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether the editor shows CodeLens.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.wordWrap": {
            "type": "string",
            "enum": [
                "off",
                "on",
                "inherit"
            ],
            "default": "inherit",
            "markdownEnumDescriptions": [
                "Lines will never wrap.",
                "Lines will wrap at the viewport width.",
                "Lines will wrap according to the `#editor.wordWrap#` setting."
            ],
            "defaultDefaultValue": "inherit",
            "scope": 5,
            "restricted": false
        },
        "diffEditor.diffAlgorithm": {
            "type": "string",
            "enum": [
                "legacy",
                "advanced"
            ],
            "default": "advanced",
            "markdownEnumDescriptions": [
                "Uses the legacy diffing algorithm.",
                "Uses the advanced diffing algorithm."
            ],
            "tags": [
                "experimental"
            ],
            "defaultDefaultValue": "advanced",
            "scope": 5,
            "restricted": false
        },
        "diffEditor.hideUnchangedRegions.enabled": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Controls whether the diff editor shows unchanged regions.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.hideUnchangedRegions.revealLineCount": {
            "type": "integer",
            "default": 20,
            "markdownDescription": "Controls how many lines are used for unchanged regions.",
            "minimum": 1,
            "defaultDefaultValue": 20,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.hideUnchangedRegions.minimumLineCount": {
            "type": "integer",
            "default": 3,
            "markdownDescription": "Controls how many lines are used as a minimum for unchanged regions.",
            "minimum": 1,
            "defaultDefaultValue": 3,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.hideUnchangedRegions.contextLineCount": {
            "type": "integer",
            "default": 3,
            "markdownDescription": "Controls how many lines are used as context when comparing unchanged regions.",
            "minimum": 1,
            "defaultDefaultValue": 3,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.experimental.showMoves": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Controls whether the diff editor should show detected code moves.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "diffEditor.experimental.showEmptyDecorations": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the diff editor shows empty decorations to see where characters got inserted or deleted.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.acceptSuggestionOnCommitCharacter": {
            "markdownDescription": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.acceptSuggestionOnEnter": {
            "markdownEnumDescriptions": [
                "",
                "Only accept a suggestion with `Enter` when it makes a textual change.",
                ""
            ],
            "markdownDescription": "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.",
            "type": "string",
            "enum": [
                "on",
                "smart",
                "off"
            ],
            "default": "on",
            "defaultDefaultValue": "on",
            "scope": 5,
            "restricted": false
        },
        "editor.accessibilitySupport": {
            "type": "string",
            "enum": [
                "auto",
                "on",
                "off"
            ],
            "enumDescriptions": [
                "Use platform APIs to detect when a Screen Reader is attached",
                "Optimize for usage with a Screen Reader",
                "Assume a screen reader is not attached"
            ],
            "default": "auto",
            "tags": [
                "accessibility"
            ],
            "description": "Controls if the UI should run in a mode where it is optimized for screen readers.",
            "defaultDefaultValue": "auto",
            "scope": 5,
            "restricted": false
        },
        "editor.accessibilityPageSize": {
            "description": "Controls the number of lines in the editor that can be read out by a screen reader at once. When we detect a screen reader we automatically set the default to be 500. Warning: this has a performance implication for numbers larger than the default.",
            "tags": [
                "accessibility"
            ],
            "type": "integer",
            "default": 10,
            "minimum": 1,
            "maximum": 1073741824,
            "defaultDefaultValue": 10,
            "scope": 5,
            "restricted": false
        },
        "editor.autoClosingBrackets": {
            "enumDescriptions": [
                "",
                "Use language configurations to determine when to autoclose brackets.",
                "Autoclose brackets only when the cursor is to the left of whitespace.",
                ""
            ],
            "description": "Controls whether the editor should automatically close brackets after the user adds an opening bracket.",
            "type": "string",
            "enum": [
                "always",
                "languageDefined",
                "beforeWhitespace",
                "never"
            ],
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "scope": 5,
            "restricted": false
        },
        "editor.autoClosingComments": {
            "enumDescriptions": [
                "",
                "Use language configurations to determine when to autoclose comments.",
                "Autoclose comments only when the cursor is to the left of whitespace.",
                ""
            ],
            "description": "Controls whether the editor should automatically close comments after the user adds an opening comment.",
            "type": "string",
            "enum": [
                "always",
                "languageDefined",
                "beforeWhitespace",
                "never"
            ],
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "scope": 5,
            "restricted": false
        },
        "editor.screenReaderAnnounceInlineSuggestion": {
            "description": "Control whether inline suggestions are announced by a screen reader.",
            "tags": [
                "accessibility"
            ],
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.autoClosingDelete": {
            "enumDescriptions": [
                "",
                "Remove adjacent closing quotes or brackets only if they were automatically inserted.",
                ""
            ],
            "description": "Controls whether the editor should remove adjacent closing quotes or brackets when deleting.",
            "type": "string",
            "enum": [
                "always",
                "auto",
                "never"
            ],
            "default": "auto",
            "defaultDefaultValue": "auto",
            "scope": 5,
            "restricted": false
        },
        "editor.autoClosingOvertype": {
            "enumDescriptions": [
                "",
                "Type over closing quotes or brackets only if they were automatically inserted.",
                ""
            ],
            "description": "Controls whether the editor should type over closing quotes or brackets.",
            "type": "string",
            "enum": [
                "always",
                "auto",
                "never"
            ],
            "default": "auto",
            "defaultDefaultValue": "auto",
            "scope": 5,
            "restricted": false
        },
        "editor.autoClosingQuotes": {
            "enumDescriptions": [
                "",
                "Use language configurations to determine when to autoclose quotes.",
                "Autoclose quotes only when the cursor is to the left of whitespace.",
                ""
            ],
            "description": "Controls whether the editor should automatically close quotes after the user adds an opening quote.",
            "type": "string",
            "enum": [
                "always",
                "languageDefined",
                "beforeWhitespace",
                "never"
            ],
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "scope": 5,
            "restricted": false
        },
        "editor.autoIndent": {
            "enumDescriptions": [
                "The editor will not insert indentation automatically.",
                "The editor will keep the current line's indentation.",
                "The editor will keep the current line's indentation and honor language defined brackets.",
                "The editor will keep the current line's indentation, honor language defined brackets and invoke special onEnterRules defined by languages.",
                "The editor will keep the current line's indentation, honor language defined brackets, invoke special onEnterRules defined by languages, and honor indentationRules defined by languages."
            ],
            "description": "Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.",
            "type": "string",
            "enum": [
                "none",
                "keep",
                "brackets",
                "advanced",
                "full"
            ],
            "default": "full",
            "defaultDefaultValue": "full",
            "scope": 5,
            "restricted": false
        },
        "editor.autoSurround": {
            "enumDescriptions": [
                "Use language configurations to determine when to automatically surround selections.",
                "Surround with quotes but not brackets.",
                "Surround with brackets but not quotes.",
                ""
            ],
            "description": "Controls whether the editor should automatically surround selections when typing quotes or brackets.",
            "type": "string",
            "enum": [
                "languageDefined",
                "quotes",
                "brackets",
                "never"
            ],
            "default": "languageDefined",
            "defaultDefaultValue": "languageDefined",
            "scope": 5,
            "restricted": false
        },
        "editor.bracketPairColorization.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether bracket pair colorization is enabled or not. Use `#workbench.colorCustomizations#` to override the bracket highlight colors.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.bracketPairColorization.independentColorPoolPerBracketType": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether each bracket type has its own independent color pool.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.guides.bracketPairs": {
            "type": [
                "boolean",
                "string"
            ],
            "enum": [
                true,
                "active",
                false
            ],
            "enumDescriptions": [
                "Enables bracket pair guides.",
                "Enables bracket pair guides only for the active bracket pair.",
                "Disables bracket pair guides."
            ],
            "default": false,
            "description": "Controls whether bracket pair guides are enabled or not.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.guides.bracketPairsHorizontal": {
            "type": [
                "boolean",
                "string"
            ],
            "enum": [
                true,
                "active",
                false
            ],
            "enumDescriptions": [
                "Enables horizontal guides as addition to vertical bracket pair guides.",
                "Enables horizontal guides only for the active bracket pair.",
                "Disables horizontal bracket pair guides."
            ],
            "default": "active",
            "description": "Controls whether horizontal bracket pair guides are enabled or not.",
            "defaultDefaultValue": "active",
            "scope": 5,
            "restricted": false
        },
        "editor.guides.highlightActiveBracketPair": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the editor should highlight the active bracket pair.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.guides.indentation": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the editor should render indent guides.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.guides.highlightActiveIndentation": {
            "type": [
                "boolean",
                "string"
            ],
            "enum": [
                true,
                "always",
                false
            ],
            "enumDescriptions": [
                "Highlights the active indent guide.",
                "Highlights the active indent guide even if bracket guides are highlighted.",
                "Do not highlight the active indent guide."
            ],
            "default": true,
            "description": "Controls whether the editor should highlight the active indent guide.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.codeLens": {
            "description": "Controls whether the editor shows CodeLens.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.codeLensFontFamily": {
            "description": "Controls the font family for CodeLens.",
            "type": "string",
            "default": "",
            "defaultDefaultValue": "",
            "scope": 5,
            "restricted": false
        },
        "editor.codeLensFontSize": {
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 100,
            "markdownDescription": "Controls the font size in pixels for CodeLens. When set to 0, 90% of `#editor.fontSize#` is used.",
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.colorDecorators": {
            "description": "Controls whether the editor should render the inline color decorators and color picker.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.colorDecoratorsLimit": {
            "markdownDescription": "Controls the max number of color decorators that can be rendered in an editor at once.",
            "type": "integer",
            "default": 500,
            "minimum": 1,
            "maximum": 1000000,
            "defaultDefaultValue": 500,
            "scope": 5,
            "restricted": false
        },
        "editor.columnSelection": {
            "description": "Enable that the selection with the mouse and keys is doing column selection.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.comments.insertSpace": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether a space character is inserted when commenting.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.comments.ignoreEmptyLines": {
            "type": "boolean",
            "default": true,
            "description": "Controls if empty lines should be ignored with toggle, add or remove actions for line comments.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.copyWithSyntaxHighlighting": {
            "description": "Controls whether syntax highlighting should be copied into the clipboard.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.cursorBlinking": {
            "description": "Control the cursor animation style.",
            "type": "string",
            "enum": [
                "blink",
                "smooth",
                "phase",
                "expand",
                "solid"
            ],
            "default": "blink",
            "defaultDefaultValue": "blink",
            "scope": 5,
            "restricted": false
        },
        "editor.cursorSmoothCaretAnimation": {
            "enumDescriptions": [
                "Smooth caret animation is disabled.",
                "Smooth caret animation is enabled only when the user moves the cursor with an explicit gesture.",
                "Smooth caret animation is always enabled."
            ],
            "description": "Controls whether the smooth caret animation should be enabled.",
            "type": "string",
            "enum": [
                "off",
                "explicit",
                "on"
            ],
            "default": "off",
            "defaultDefaultValue": "off",
            "scope": 5,
            "restricted": false
        },
        "editor.cursorStyle": {
            "description": "Controls the cursor style.",
            "type": "string",
            "enum": [
                "line",
                "block",
                "underline",
                "line-thin",
                "block-outline",
                "underline-thin"
            ],
            "default": "line",
            "defaultDefaultValue": "line",
            "scope": 5,
            "restricted": false
        },
        "editor.cursorSurroundingLines": {
            "description": "Controls the minimal number of visible leading lines (minimum 0) and trailing lines (minimum 1) surrounding the cursor. Known as 'scrollOff' or 'scrollOffset' in some other editors.",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1073741824,
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.cursorSurroundingLinesStyle": {
            "enumDescriptions": [
                "`cursorSurroundingLines` is enforced only when triggered via the keyboard or API.",
                "`cursorSurroundingLines` is enforced always."
            ],
            "markdownDescription": "Controls when `#cursorSurroundingLines#` should be enforced.",
            "type": "string",
            "enum": [
                "default",
                "all"
            ],
            "default": "default",
            "defaultDefaultValue": "default",
            "scope": 5,
            "restricted": false
        },
        "editor.cursorWidth": {
            "markdownDescription": "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1073741824,
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.dragAndDrop": {
            "description": "Controls whether the editor should allow moving selections via drag and drop.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.dropIntoEditor.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether you can drag and drop a file into a text editor by holding down `shift` (instead of opening the file in an editor).",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.dropIntoEditor.showDropSelector": {
            "type": "string",
            "markdownDescription": "Controls if a widget is shown when dropping files into the editor. This widget lets you control how the file is dropped.",
            "enum": [
                "afterDrop",
                "never"
            ],
            "enumDescriptions": [
                "Show the drop selector widget after a file is dropped into the editor.",
                "Never show the drop selector widget. Instead the default drop provider is always used."
            ],
            "default": "afterDrop",
            "defaultDefaultValue": "afterDrop",
            "scope": 5,
            "restricted": false
        },
        "editor.emptySelectionClipboard": {
            "description": "Controls whether copying without a selection copies the current line.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.experimentalWhitespaceRendering": {
            "enumDescriptions": [
                "Use a new rendering method with svgs.",
                "Use a new rendering method with font characters.",
                "Use the stable rendering method."
            ],
            "description": "Controls whether whitespace is rendered with a new, experimental method.",
            "type": "string",
            "enum": [
                "svg",
                "font",
                "off"
            ],
            "default": "svg",
            "defaultDefaultValue": "svg",
            "scope": 5,
            "restricted": false
        },
        "editor.fastScrollSensitivity": {
            "markdownDescription": "Scrolling speed multiplier when pressing `Alt`.",
            "type": "number",
            "default": 5,
            "defaultDefaultValue": 5,
            "scope": 5,
            "restricted": false
        },
        "editor.find.cursorMoveOnType": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the cursor should jump to find matches while typing.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.find.seedSearchStringFromSelection": {
            "type": "string",
            "enum": [
                "never",
                "always",
                "selection"
            ],
            "default": "always",
            "enumDescriptions": [
                "Never seed search string from the editor selection.",
                "Always seed search string from the editor selection, including word at cursor position.",
                "Only seed search string from the editor selection."
            ],
            "description": "Controls whether the search string in the Find Widget is seeded from the editor selection.",
            "defaultDefaultValue": "always",
            "scope": 5,
            "restricted": false
        },
        "editor.find.autoFindInSelection": {
            "type": "string",
            "enum": [
                "never",
                "always",
                "multiline"
            ],
            "default": "never",
            "enumDescriptions": [
                "Never turn on Find in Selection automatically (default).",
                "Always turn on Find in Selection automatically.",
                "Turn on Find in Selection automatically when multiple lines of content are selected."
            ],
            "description": "Controls the condition for turning on Find in Selection automatically.",
            "defaultDefaultValue": "never",
            "scope": 5,
            "restricted": false
        },
        "editor.find.globalFindClipboard": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether the Find Widget should read or modify the shared find clipboard on macOS.",
            "included": true,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.find.addExtraSpaceOnTop": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the Find Widget should add extra lines on top of the editor. When true, you can scroll beyond the first line when the Find Widget is visible.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.find.loop": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.folding": {
            "description": "Controls whether the editor has code folding enabled.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.foldingStrategy": {
            "enumDescriptions": [
                "Use a language-specific folding strategy if available, else the indentation-based one.",
                "Use the indentation-based folding strategy."
            ],
            "description": "Controls the strategy for computing folding ranges.",
            "type": "string",
            "enum": [
                "auto",
                "indentation"
            ],
            "default": "auto",
            "defaultDefaultValue": "auto",
            "scope": 5,
            "restricted": false
        },
        "editor.foldingHighlight": {
            "description": "Controls whether the editor should highlight folded ranges.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.foldingImportsByDefault": {
            "description": "Controls whether the editor automatically collapses import ranges.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.foldingMaximumRegions": {
            "description": "The maximum number of foldable regions. Increasing this value may result in the editor becoming less responsive when the current source has a large number of foldable regions.",
            "type": "integer",
            "default": 5000,
            "minimum": 10,
            "maximum": 65000,
            "defaultDefaultValue": 5000,
            "scope": 5,
            "restricted": false
        },
        "editor.unfoldOnClickAfterEndOfLine": {
            "description": "Controls whether clicking on the empty content after a folded line will unfold the line.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.fontFamily": {
            "description": "Controls the font family.",
            "type": "string",
            "default": "Menlo, Monaco, 'Courier New', monospace",
            "defaultDefaultValue": "Menlo, Monaco, 'Courier New', monospace",
            "scope": 5,
            "restricted": false
        },
        "editor.fontLigatures": {
            "anyOf": [
                {
                    "type": "boolean",
                    "description": "Enables/Disables font ligatures ('calt' and 'liga' font features). Change this to a string for fine-grained control of the 'font-feature-settings' CSS property."
                },
                {
                    "type": "string",
                    "description": "Explicit 'font-feature-settings' CSS property. A boolean can be passed instead if one only needs to turn on/off ligatures."
                }
            ],
            "description": "Configures font ligatures or font features. Can be either a boolean to enable/disable ligatures or a string for the value of the CSS 'font-feature-settings' property.",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.fontSize": {
            "type": "number",
            "minimum": 6,
            "maximum": 100,
            "default": 12,
            "description": "Controls the font size in pixels.",
            "defaultDefaultValue": 12,
            "scope": 5,
            "restricted": false
        },
        "editor.fontWeight": {
            "anyOf": [
                {
                    "type": "number",
                    "minimum": 1,
                    "maximum": 1000,
                    "errorMessage": "Only \"normal\" and \"bold\" keywords or numbers between 1 and 1000 are allowed."
                },
                {
                    "type": "string",
                    "pattern": "^(normal|bold|1000|[1-9][0-9]{0,2})$"
                },
                {
                    "enum": [
                        "normal",
                        "bold",
                        "100",
                        "200",
                        "300",
                        "400",
                        "500",
                        "600",
                        "700",
                        "800",
                        "900"
                    ]
                }
            ],
            "default": "normal",
            "description": "Controls the font weight. Accepts \"normal\" and \"bold\" keywords or numbers between 1 and 1000.",
            "defaultDefaultValue": "normal",
            "scope": 5,
            "restricted": false
        },
        "editor.fontVariations": {
            "anyOf": [
                {
                    "type": "boolean",
                    "description": "Enables/Disables the translation from font-weight to font-variation-settings. Change this to a string for fine-grained control of the 'font-variation-settings' CSS property."
                },
                {
                    "type": "string",
                    "description": "Explicit 'font-variation-settings' CSS property. A boolean can be passed instead if one only needs to translate font-weight to font-variation-settings."
                }
            ],
            "description": "Configures font variations. Can be either a boolean to enable/disable the translation from font-weight to font-variation-settings or a string for the value of the CSS 'font-variation-settings' property.",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.formatOnPaste": {
            "description": "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.formatOnType": {
            "description": "Controls whether the editor should automatically format the line after typing.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.glyphMargin": {
            "description": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.multiple": {
            "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.editor.gotoLocation.multipleDefinitions' or 'editor.editor.gotoLocation.multipleImplementations' instead.",
            "default": null,
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.multipleDefinitions": {
            "description": "Controls the behavior the 'Go to Definition'-command when multiple target locations exist.",
            "type": "string",
            "enum": [
                "peek",
                "gotoAndPeek",
                "goto"
            ],
            "default": "peek",
            "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others"
            ],
            "defaultDefaultValue": "peek",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.multipleTypeDefinitions": {
            "description": "Controls the behavior the 'Go to Type Definition'-command when multiple target locations exist.",
            "type": "string",
            "enum": [
                "peek",
                "gotoAndPeek",
                "goto"
            ],
            "default": "peek",
            "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others"
            ],
            "defaultDefaultValue": "peek",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.multipleDeclarations": {
            "description": "Controls the behavior the 'Go to Declaration'-command when multiple target locations exist.",
            "type": "string",
            "enum": [
                "peek",
                "gotoAndPeek",
                "goto"
            ],
            "default": "peek",
            "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others"
            ],
            "defaultDefaultValue": "peek",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.multipleImplementations": {
            "description": "Controls the behavior the 'Go to Implementations'-command when multiple target locations exist.",
            "type": "string",
            "enum": [
                "peek",
                "gotoAndPeek",
                "goto"
            ],
            "default": "peek",
            "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others"
            ],
            "defaultDefaultValue": "peek",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.multipleReferences": {
            "description": "Controls the behavior the 'Go to References'-command when multiple target locations exist.",
            "type": "string",
            "enum": [
                "peek",
                "gotoAndPeek",
                "goto"
            ],
            "default": "peek",
            "enumDescriptions": [
                "Show Peek view of the results (default)",
                "Go to the primary result and show a Peek view",
                "Go to the primary result and enable Peek-less navigation to others"
            ],
            "defaultDefaultValue": "peek",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.alternativeDefinitionCommand": {
            "type": "string",
            "default": "editor.action.goToReferences",
            "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition"
            ],
            "description": "Alternative command id that is being executed when the result of 'Go to Definition' is the current location.",
            "defaultDefaultValue": "editor.action.goToReferences",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.alternativeTypeDefinitionCommand": {
            "type": "string",
            "default": "editor.action.goToReferences",
            "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition"
            ],
            "description": "Alternative command id that is being executed when the result of 'Go to Type Definition' is the current location.",
            "defaultDefaultValue": "editor.action.goToReferences",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.alternativeDeclarationCommand": {
            "type": "string",
            "default": "editor.action.goToReferences",
            "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition"
            ],
            "description": "Alternative command id that is being executed when the result of 'Go to Declaration' is the current location.",
            "defaultDefaultValue": "editor.action.goToReferences",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.alternativeImplementationCommand": {
            "type": "string",
            "default": "",
            "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition"
            ],
            "description": "Alternative command id that is being executed when the result of 'Go to Implementation' is the current location.",
            "defaultDefaultValue": "",
            "scope": 5,
            "restricted": false
        },
        "editor.gotoLocation.alternativeReferenceCommand": {
            "type": "string",
            "default": "",
            "enum": [
                "",
                "editor.action.referenceSearch.trigger",
                "editor.action.goToReferences",
                "editor.action.peekImplementation",
                "editor.action.goToImplementation",
                "editor.action.peekTypeDefinition",
                "editor.action.goToTypeDefinition",
                "editor.action.peekDeclaration",
                "editor.action.revealDeclaration",
                "editor.action.peekDefinition",
                "editor.action.revealDefinitionAside",
                "editor.action.revealDefinition"
            ],
            "description": "Alternative command id that is being executed when the result of 'Go to Reference' is the current location.",
            "defaultDefaultValue": "",
            "scope": 5,
            "restricted": false
        },
        "editor.hideCursorInOverviewRuler": {
            "description": "Controls whether the cursor should be hidden in the overview ruler.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.hover.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the hover is shown.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.hover.delay": {
            "type": "number",
            "default": 300,
            "minimum": 0,
            "maximum": 10000,
            "description": "Controls the delay in milliseconds after which the hover is shown.",
            "defaultDefaultValue": 300,
            "scope": 5,
            "restricted": false
        },
        "editor.hover.sticky": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the hover should remain visible when mouse is moved over it.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.hover.hidingDelay": {
            "type": "integer",
            "minimum": 0,
            "default": 300,
            "description": "Controls the delay in milliseconds after thich the hover is hidden. Requires `editor.hover.sticky` to be enabled.",
            "defaultDefaultValue": 300,
            "scope": 5,
            "restricted": false
        },
        "editor.hover.above": {
            "type": "boolean",
            "default": true,
            "description": "Prefer showing hovers above the line, if there's space.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.inlineSuggest.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to automatically show inline suggestions in the editor.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.inlineSuggest.showToolbar": {
            "type": "string",
            "default": "onHover",
            "enum": [
                "always",
                "onHover"
            ],
            "enumDescriptions": [
                "Show the inline suggestion toolbar whenever an inline suggestion is shown.",
                "Show the inline suggestion toolbar when hovering over an inline suggestion."
            ],
            "description": "Controls when to show the inline suggestion toolbar.",
            "defaultDefaultValue": "onHover",
            "scope": 5,
            "restricted": false
        },
        "editor.inlineSuggest.suppressSuggestions": {
            "type": "boolean",
            "default": false,
            "description": "Controls how inline suggestions interact with the suggest widget. If enabled, the suggest widget is not shown automatically when inline suggestions are available.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.letterSpacing": {
            "description": "Controls the letter spacing in pixels.",
            "type": "number",
            "default": 0,
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.lightbulb.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enables the Code Action lightbulb in the editor.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.lineHeight": {
            "markdownDescription": "Controls the line height. \n - Use 0 to automatically compute the line height from the font size.\n - Values between 0 and 8 will be used as a multiplier with the font size.\n - Values greater than or equal to 8 will be used as effective values.",
            "type": "number",
            "default": 0,
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.lineNumbers": {
            "type": "string",
            "enum": [
                "off",
                "on",
                "relative",
                "interval"
            ],
            "enumDescriptions": [
                "Line numbers are not rendered.",
                "Line numbers are rendered as absolute number.",
                "Line numbers are rendered as distance in lines to cursor position.",
                "Line numbers are rendered every 10 lines."
            ],
            "default": "on",
            "description": "Controls the display of line numbers.",
            "defaultDefaultValue": "on",
            "scope": 5,
            "restricted": false
        },
        "editor.linkedEditing": {
            "description": "Controls whether the editor has linked editing enabled. Depending on the language, related symbols such as HTML tags, are updated while editing.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.links": {
            "description": "Controls whether the editor should detect links and make them clickable.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.matchBrackets": {
            "description": "Highlight matching brackets.",
            "type": "string",
            "enum": [
                "always",
                "near",
                "never"
            ],
            "default": "always",
            "defaultDefaultValue": "always",
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the minimap is shown.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.autohide": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether the minimap is hidden automatically.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.size": {
            "type": "string",
            "enum": [
                "proportional",
                "fill",
                "fit"
            ],
            "enumDescriptions": [
                "The minimap has the same size as the editor contents (and might scroll).",
                "The minimap will stretch or shrink as necessary to fill the height of the editor (no scrolling).",
                "The minimap will shrink as necessary to never be larger than the editor (no scrolling)."
            ],
            "default": "proportional",
            "description": "Controls the size of the minimap.",
            "defaultDefaultValue": "proportional",
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.side": {
            "type": "string",
            "enum": [
                "left",
                "right"
            ],
            "default": "right",
            "description": "Controls the side where to render the minimap.",
            "defaultDefaultValue": "right",
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.showSlider": {
            "type": "string",
            "enum": [
                "always",
                "mouseover"
            ],
            "default": "mouseover",
            "description": "Controls when the minimap slider is shown.",
            "defaultDefaultValue": "mouseover",
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.scale": {
            "type": "number",
            "default": 1,
            "minimum": 1,
            "maximum": 3,
            "enum": [
                1,
                2,
                3
            ],
            "description": "Scale of content drawn in the minimap: 1, 2 or 3.",
            "defaultDefaultValue": 1,
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.renderCharacters": {
            "type": "boolean",
            "default": true,
            "description": "Render the actual characters on a line as opposed to color blocks.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.minimap.maxColumn": {
            "type": "number",
            "default": 120,
            "description": "Limit the width of the minimap to render at most a certain number of columns.",
            "defaultDefaultValue": 120,
            "scope": 5,
            "restricted": false
        },
        "editor.mouseWheelScrollSensitivity": {
            "markdownDescription": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
            "type": "number",
            "default": 1,
            "defaultDefaultValue": 1,
            "scope": 5,
            "restricted": false
        },
        "editor.mouseWheelZoom": {
            "markdownDescription": "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.multiCursorMergeOverlapping": {
            "description": "Merge multiple cursors when they are overlapping.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.multiCursorModifier": {
            "markdownEnumDescriptions": [
                "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
                "Maps to `Alt` on Windows and Linux and to `Option` on macOS."
            ],
            "markdownDescription": "The modifier to be used to add multiple cursors with the mouse. The Go to Definition and Open Link mouse gestures will adapt such that they do not conflict with the [multicursor modifier](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).",
            "type": "string",
            "enum": [
                "ctrlCmd",
                "alt"
            ],
            "default": "alt",
            "defaultDefaultValue": "alt",
            "scope": 5,
            "restricted": false
        },
        "editor.multiCursorPaste": {
            "markdownEnumDescriptions": [
                "Each cursor pastes a single line of the text.",
                "Each cursor pastes the full text."
            ],
            "markdownDescription": "Controls pasting when the line count of the pasted text matches the cursor count.",
            "type": "string",
            "enum": [
                "spread",
                "full"
            ],
            "default": "spread",
            "defaultDefaultValue": "spread",
            "scope": 5,
            "restricted": false
        },
        "editor.multiCursorLimit": {
            "markdownDescription": "Controls the max number of cursors that can be in an active editor at once.",
            "type": "integer",
            "default": 10000,
            "minimum": 1,
            "maximum": 100000,
            "defaultDefaultValue": 10000,
            "scope": 5,
            "restricted": false
        },
        "editor.occurrencesHighlight": {
            "description": "Controls whether the editor should highlight semantic symbol occurrences.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.overviewRulerBorder": {
            "description": "Controls whether a border should be drawn around the overview ruler.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.padding.top": {
            "type": "number",
            "default": 0,
            "minimum": 0,
            "maximum": 1000,
            "description": "Controls the amount of space between the top edge of the editor and the first line.",
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.padding.bottom": {
            "type": "number",
            "default": 0,
            "minimum": 0,
            "maximum": 1000,
            "description": "Controls the amount of space between the bottom edge of the editor and the last line.",
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.pasteAs.enabled": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether you can paste content in different ways.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.pasteAs.showPasteSelector": {
            "type": "string",
            "markdownDescription": "Controls if a widget is shown when pasting content in to the editor. This widget lets you control how the file is pasted.",
            "enum": [
                "afterPaste",
                "never"
            ],
            "enumDescriptions": [
                "Show the paste selector widget after content is pasted into the editor.",
                "Never show the paste selector widget. Instead the default pasting behavior is always used."
            ],
            "default": "afterPaste",
            "defaultDefaultValue": "afterPaste",
            "scope": 5,
            "restricted": false
        },
        "editor.parameterHints.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enables a pop-up that shows parameter documentation and type information as you type.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.parameterHints.cycle": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.peekWidgetDefaultFocus": {
            "enumDescriptions": [
                "Focus the tree when opening peek",
                "Focus the editor when opening peek"
            ],
            "description": "Controls whether to focus the inline editor or the tree in the peek widget.",
            "type": "string",
            "enum": [
                "tree",
                "editor"
            ],
            "default": "tree",
            "defaultDefaultValue": "tree",
            "scope": 5,
            "restricted": false
        },
        "editor.definitionLinkOpensInPeek": {
            "description": "Controls whether the Go to Definition mouse gesture always opens the peek widget.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.quickSuggestions": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "strings": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string",
                            "enum": [
                                "on",
                                "inline",
                                "off"
                            ],
                            "enumDescriptions": [
                                "Quick suggestions show inside the suggest widget",
                                "Quick suggestions show as ghost text",
                                "Quick suggestions are disabled"
                            ]
                        }
                    ],
                    "default": "off",
                    "description": "Enable quick suggestions inside strings."
                },
                "comments": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string",
                            "enum": [
                                "on",
                                "inline",
                                "off"
                            ],
                            "enumDescriptions": [
                                "Quick suggestions show inside the suggest widget",
                                "Quick suggestions show as ghost text",
                                "Quick suggestions are disabled"
                            ]
                        }
                    ],
                    "default": "off",
                    "description": "Enable quick suggestions inside comments."
                },
                "other": {
                    "anyOf": [
                        {
                            "type": "boolean"
                        },
                        {
                            "type": "string",
                            "enum": [
                                "on",
                                "inline",
                                "off"
                            ],
                            "enumDescriptions": [
                                "Quick suggestions show inside the suggest widget",
                                "Quick suggestions show as ghost text",
                                "Quick suggestions are disabled"
                            ]
                        }
                    ],
                    "default": "on",
                    "description": "Enable quick suggestions outside of strings and comments."
                }
            },
            "default": {
                "other": "on",
                "comments": "off",
                "strings": "off"
            },
            "markdownDescription": "Controls whether suggestions should automatically show up while typing. This can be controlled for typing in comments, strings, and other code. Quick suggestion can be configured to show as ghost text or with the suggest widget. Also be aware of the '#editor.suggestOnTriggerCharacters#'-setting which controls if suggestions are triggered by special characters.",
            "defaultDefaultValue": {
                "other": "on",
                "comments": "off",
                "strings": "off"
            },
            "scope": 5,
            "restricted": false
        },
        "editor.quickSuggestionsDelay": {
            "description": "Controls the delay in milliseconds after which quick suggestions will show up.",
            "type": "integer",
            "default": 10,
            "minimum": 0,
            "maximum": 1073741824,
            "defaultDefaultValue": 10,
            "scope": 5,
            "restricted": false
        },
        "editor.renameOnType": {
            "description": "Controls whether the editor auto renames on type.",
            "markdownDeprecationMessage": "Deprecated, use `editor.linkedEditing` instead.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false,
            "deprecationMessage": "Deprecated, use `editor.linkedEditing` instead."
        },
        "editor.renderControlCharacters": {
            "description": "Controls whether the editor should render control characters.",
            "restricted": true,
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5
        },
        "editor.renderFinalNewline": {
            "description": "Render last line number when the file ends with a newline.",
            "type": "string",
            "enum": [
                "off",
                "on",
                "dimmed"
            ],
            "default": "on",
            "defaultDefaultValue": "on",
            "scope": 5,
            "restricted": false
        },
        "editor.renderLineHighlight": {
            "enumDescriptions": [
                "",
                "",
                "",
                "Highlights both the gutter and the current line."
            ],
            "description": "Controls how the editor should render the current line highlight.",
            "type": "string",
            "enum": [
                "none",
                "gutter",
                "line",
                "all"
            ],
            "default": "line",
            "defaultDefaultValue": "line",
            "scope": 5,
            "restricted": false
        },
        "editor.renderLineHighlightOnlyWhenFocus": {
            "description": "Controls if the editor should render the current line highlight only when the editor is focused.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.renderWhitespace": {
            "enumDescriptions": [
                "",
                "Render whitespace characters except for single spaces between words.",
                "Render whitespace characters only on selected text.",
                "Render only trailing whitespace characters.",
                ""
            ],
            "description": "Controls how the editor should render whitespace characters.",
            "type": "string",
            "enum": [
                "none",
                "boundary",
                "selection",
                "trailing",
                "all"
            ],
            "default": "selection",
            "defaultDefaultValue": "selection",
            "scope": 5,
            "restricted": false
        },
        "editor.roundedSelection": {
            "description": "Controls whether selections should have rounded corners.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.rulers": {
            "type": "array",
            "items": {
                "anyOf": [
                    {
                        "type": "number",
                        "description": "Number of monospace characters at which this editor ruler will render."
                    },
                    {
                        "type": [
                            "object"
                        ],
                        "properties": {
                            "column": {
                                "type": "number",
                                "description": "Number of monospace characters at which this editor ruler will render."
                            },
                            "color": {
                                "type": "string",
                                "description": "Color of this editor ruler.",
                                "format": "color-hex"
                            }
                        }
                    }
                ]
            },
            "default": [],
            "description": "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.",
            "defaultDefaultValue": [],
            "scope": 5,
            "restricted": false
        },
        "editor.scrollbar.vertical": {
            "type": "string",
            "enum": [
                "auto",
                "visible",
                "hidden"
            ],
            "enumDescriptions": [
                "The vertical scrollbar will be visible only when necessary.",
                "The vertical scrollbar will always be visible.",
                "The vertical scrollbar will always be hidden."
            ],
            "default": "auto",
            "description": "Controls the visibility of the vertical scrollbar.",
            "defaultDefaultValue": "auto",
            "scope": 5,
            "restricted": false
        },
        "editor.scrollbar.horizontal": {
            "type": "string",
            "enum": [
                "auto",
                "visible",
                "hidden"
            ],
            "enumDescriptions": [
                "The horizontal scrollbar will be visible only when necessary.",
                "The horizontal scrollbar will always be visible.",
                "The horizontal scrollbar will always be hidden."
            ],
            "default": "auto",
            "description": "Controls the visibility of the horizontal scrollbar.",
            "defaultDefaultValue": "auto",
            "scope": 5,
            "restricted": false
        },
        "editor.scrollbar.verticalScrollbarSize": {
            "type": "number",
            "default": 14,
            "description": "The width of the vertical scrollbar.",
            "defaultDefaultValue": 14,
            "scope": 5,
            "restricted": false
        },
        "editor.scrollbar.horizontalScrollbarSize": {
            "type": "number",
            "default": 12,
            "description": "The height of the horizontal scrollbar.",
            "defaultDefaultValue": 12,
            "scope": 5,
            "restricted": false
        },
        "editor.scrollbar.scrollByPage": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether clicks scroll by page or jump to click position.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.scrollBeyondLastColumn": {
            "description": "Controls the number of extra characters beyond which the editor will scroll horizontally.",
            "type": "integer",
            "default": 4,
            "minimum": 0,
            "maximum": 1073741824,
            "defaultDefaultValue": 4,
            "scope": 5,
            "restricted": false
        },
        "editor.scrollBeyondLastLine": {
            "description": "Controls whether the editor will scroll beyond the last line.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.scrollPredominantAxis": {
            "description": "Scroll only along the predominant axis when scrolling both vertically and horizontally at the same time. Prevents horizontal drift when scrolling vertically on a trackpad.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.selectionHighlight": {
            "description": "Controls whether the editor should highlight matches similar to the selection.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.showFoldingControls": {
            "enumDescriptions": [
                "Always show the folding controls.",
                "Never show the folding controls and reduce the gutter size.",
                "Only show the folding controls when the mouse is over the gutter."
            ],
            "description": "Controls when the folding controls on the gutter are shown.",
            "type": "string",
            "enum": [
                "always",
                "never",
                "mouseover"
            ],
            "default": "mouseover",
            "defaultDefaultValue": "mouseover",
            "scope": 5,
            "restricted": false
        },
        "editor.showUnused": {
            "description": "Controls fading out of unused code.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.snippetSuggestions": {
            "enumDescriptions": [
                "Show snippet suggestions on top of other suggestions.",
                "Show snippet suggestions below other suggestions.",
                "Show snippets suggestions with other suggestions.",
                "Do not show snippet suggestions."
            ],
            "description": "Controls whether snippets are shown with other suggestions and how they are sorted.",
            "type": "string",
            "enum": [
                "top",
                "bottom",
                "inline",
                "none"
            ],
            "default": "inline",
            "defaultDefaultValue": "inline",
            "scope": 5,
            "restricted": false
        },
        "editor.smartSelect.selectLeadingAndTrailingWhitespace": {
            "description": "Whether leading and trailing whitespace should always be selected.",
            "default": true,
            "type": "boolean",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.smartSelect.selectSubwords": {
            "description": "Whether subwords (like 'foo' in 'fooBar' or 'foo_bar') should be selected.",
            "default": true,
            "type": "boolean",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.smoothScrolling": {
            "description": "Controls whether the editor will scroll using an animation.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.stickyScroll.enabled": {
            "type": "boolean",
            "default": false,
            "description": "Shows the nested current scopes during the scroll at the top of the editor.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.stickyScroll.maxLineCount": {
            "type": "number",
            "default": 5,
            "minimum": 1,
            "maximum": 10,
            "description": "Defines the maximum number of sticky lines to show.",
            "defaultDefaultValue": 5,
            "scope": 5,
            "restricted": false
        },
        "editor.stickyScroll.defaultModel": {
            "type": "string",
            "enum": [
                "outlineModel",
                "foldingProviderModel",
                "indentationModel"
            ],
            "default": "outlineModel",
            "description": "Defines the model to use for determining which lines to stick. If the outline model does not exist, it will fall back on the folding provider model which falls back on the indentation model. This order is respected in all three cases.",
            "defaultDefaultValue": "outlineModel",
            "scope": 5,
            "restricted": false
        },
        "editor.stickyScroll.scrollWithEditor": {
            "type": "boolean",
            "default": true,
            "description": "Enable scrolling of the sticky scroll widget with the editor's horizontal scrollbar.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.stickyTabStops": {
            "description": "Emulate selection behavior of tab characters when using spaces for indentation. Selection will stick to tab stops.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.insertMode": {
            "type": "string",
            "enum": [
                "insert",
                "replace"
            ],
            "enumDescriptions": [
                "Insert suggestion without overwriting text right of the cursor.",
                "Insert suggestion and overwrite text right of the cursor."
            ],
            "default": "insert",
            "description": "Controls whether words are overwritten when accepting completions. Note that this depends on extensions opting into this feature.",
            "defaultDefaultValue": "insert",
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.filterGraceful": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether filtering and sorting suggestions accounts for small typos.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.localityBonus": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether sorting favors words that appear close to the cursor.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.shareSuggestSelections": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "Controls whether remembered suggestion selections are shared between multiple workspaces and windows (needs `#editor.suggestSelection#`).",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.selectionMode": {
            "type": "string",
            "enum": [
                "always",
                "never",
                "whenTriggerCharacter",
                "whenQuickSuggestion"
            ],
            "enumDescriptions": [
                "Always select a suggestion when automatically triggering IntelliSense.",
                "Never select a suggestion when automatically triggering IntelliSense.",
                "Select a suggestion only when triggering IntelliSense from a trigger character.",
                "Select a suggestion only when triggering IntelliSense as you type."
            ],
            "default": "always",
            "markdownDescription": "Controls whether a suggestion is selected when the widget shows. Note that this only applies to automatically triggered suggestions (`#editor.quickSuggestions#` and `#editor.suggestOnTriggerCharacters#`) and that a suggestion is always selected when explicitly invoked, e.g via `Ctrl+Space`.",
            "defaultDefaultValue": "always",
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.snippetsPreventQuickSuggestions": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether an active snippet prevents quick suggestions.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showIcons": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether to show or hide icons in suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showStatusBar": {
            "type": "boolean",
            "default": false,
            "description": "Controls the visibility of the status bar at the bottom of the suggest widget.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.preview": {
            "type": "boolean",
            "default": false,
            "description": "Controls whether to preview the suggestion outcome in the editor.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showInlineDetails": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether suggest details show inline with the label or only in the details widget.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.maxVisibleSuggestions": {
            "type": "number",
            "deprecationMessage": "This setting is deprecated. The suggest widget can now be resized.",
            "default": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.filteredTypes": {
            "type": "object",
            "deprecationMessage": "This setting is deprecated, please use separate settings like 'editor.suggest.showKeywords' or 'editor.suggest.showSnippets' instead.",
            "default": {},
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showMethods": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `method`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showFunctions": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `function`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showConstructors": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `constructor`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showDeprecated": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `deprecated`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.matchOnWordStartOnly": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense filtering requires that the first character matches on a word start. For example, `c` on `Console` or `WebContext` but _not_ on `description`. When disabled IntelliSense will show more results but still sorts them by match quality.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showFields": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `field`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showVariables": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `variable`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showClasses": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `class`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showStructs": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `struct`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showInterfaces": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `interface`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showModules": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `module`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showProperties": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `property`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showEvents": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `event`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showOperators": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `operator`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showUnits": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `unit`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showValues": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `value`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showConstants": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `constant`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showEnums": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `enum`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showEnumMembers": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `enumMember`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showKeywords": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `keyword`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showWords": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `text`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showColors": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `color`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showFiles": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `file`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showReferences": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `reference`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showCustomcolors": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `customcolor`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showFolders": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `folder`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showTypeParameters": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `typeParameter`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showSnippets": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `snippet`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showUsers": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `user`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggest.showIssues": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "When enabled IntelliSense shows `issues`-suggestions.",
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggestFontSize": {
            "markdownDescription": "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1000,
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.suggestLineHeight": {
            "markdownDescription": "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used. The minimum value is 8.",
            "type": "integer",
            "default": 0,
            "minimum": 0,
            "maximum": 1000,
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.suggestOnTriggerCharacters": {
            "description": "Controls whether suggestions should automatically show up when typing trigger characters.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.suggestSelection": {
            "markdownEnumDescriptions": [
                "Always select the first suggestion.",
                "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
                "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`."
            ],
            "description": "Controls how suggestions are pre-selected when showing the suggest list.",
            "type": "string",
            "enum": [
                "first",
                "recentlyUsed",
                "recentlyUsedByPrefix"
            ],
            "default": "first",
            "defaultDefaultValue": "first",
            "scope": 5,
            "restricted": false
        },
        "editor.tabCompletion": {
            "enumDescriptions": [
                "Tab complete will insert the best matching suggestion when pressing tab.",
                "Disable tab completions.",
                "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled."
            ],
            "description": "Enables tab completions.",
            "type": "string",
            "enum": [
                "on",
                "off",
                "onlySnippets"
            ],
            "default": "off",
            "defaultDefaultValue": "off",
            "scope": 5,
            "restricted": false
        },
        "editor.unicodeHighlight.nonBasicASCII": {
            "restricted": true,
            "type": [
                "boolean",
                "string"
            ],
            "enum": [
                true,
                false,
                "inUntrustedWorkspace"
            ],
            "default": "inUntrustedWorkspace",
            "description": "Controls whether all non-basic ASCII characters are highlighted. Only characters between U+0020 and U+007E, tab, line-feed and carriage-return are considered basic ASCII.",
            "defaultDefaultValue": "inUntrustedWorkspace",
            "scope": 5
        },
        "editor.unicodeHighlight.invisibleCharacters": {
            "restricted": true,
            "type": "boolean",
            "default": true,
            "description": "Controls whether characters that just reserve space or have no width at all are highlighted.",
            "defaultDefaultValue": true,
            "scope": 5
        },
        "editor.unicodeHighlight.ambiguousCharacters": {
            "restricted": true,
            "type": "boolean",
            "default": true,
            "description": "Controls whether characters are highlighted that can be confused with basic ASCII characters, except those that are common in the current user locale.",
            "defaultDefaultValue": true,
            "scope": 5
        },
        "editor.unicodeHighlight.includeComments": {
            "restricted": true,
            "type": [
                "boolean",
                "string"
            ],
            "enum": [
                true,
                false,
                "inUntrustedWorkspace"
            ],
            "default": "inUntrustedWorkspace",
            "description": "Controls whether characters in comments should also be subject to Unicode highlighting.",
            "defaultDefaultValue": "inUntrustedWorkspace",
            "scope": 5
        },
        "editor.unicodeHighlight.includeStrings": {
            "restricted": true,
            "type": [
                "boolean",
                "string"
            ],
            "enum": [
                true,
                false,
                "inUntrustedWorkspace"
            ],
            "default": true,
            "description": "Controls whether characters in strings should also be subject to Unicode highlighting.",
            "defaultDefaultValue": true,
            "scope": 5
        },
        "editor.unicodeHighlight.allowedCharacters": {
            "restricted": true,
            "type": "object",
            "default": {},
            "description": "Defines allowed characters that are not being highlighted.",
            "additionalProperties": {
                "type": "boolean"
            },
            "defaultDefaultValue": {},
            "scope": 5
        },
        "editor.unicodeHighlight.allowedLocales": {
            "restricted": true,
            "type": "object",
            "additionalProperties": {
                "type": "boolean"
            },
            "default": {
                "_os": true,
                "_vscode": true
            },
            "description": "Unicode characters that are common in allowed locales are not being highlighted.",
            "defaultDefaultValue": {
                "_os": true,
                "_vscode": true
            },
            "scope": 5
        },
        "editor.unusualLineTerminators": {
            "enumDescriptions": [
                "Unusual line terminators are automatically removed.",
                "Unusual line terminators are ignored.",
                "Unusual line terminators prompt to be removed."
            ],
            "description": "Remove unusual line terminators that might cause problems.",
            "type": "string",
            "enum": [
                "auto",
                "off",
                "prompt"
            ],
            "default": "prompt",
            "defaultDefaultValue": "prompt",
            "scope": 5,
            "restricted": false
        },
        "editor.useTabStops": {
            "description": "Inserting and deleting whitespace follows tab stops.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.wordBreak": {
            "markdownEnumDescriptions": [
                "Use the default line break rule.",
                "Word breaks should not be used for Chinese/Japanese/Korean (CJK) text. Non-CJK text behavior is the same as for normal."
            ],
            "description": "Controls the word break rules used for Chinese/Japanese/Korean (CJK) text.",
            "type": "string",
            "enum": [
                "normal",
                "keepAll"
            ],
            "default": "normal",
            "defaultDefaultValue": "normal",
            "scope": 5,
            "restricted": false
        },
        "editor.wordSeparators": {
            "description": "Characters that will be used as word separators when doing word related navigations or operations.",
            "type": "string",
            "default": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
            "defaultDefaultValue": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",
            "scope": 5,
            "restricted": false
        },
        "editor.wordWrap": {
            "markdownEnumDescriptions": [
                "Lines will never wrap.",
                "Lines will wrap at the viewport width.",
                "Lines will wrap at `#editor.wordWrapColumn#`.",
                "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`."
            ],
            "description": "Controls how lines should wrap.",
            "type": "string",
            "enum": [
                "off",
                "on",
                "wordWrapColumn",
                "bounded"
            ],
            "default": "off",
            "defaultDefaultValue": "off",
            "scope": 5,
            "restricted": false
        },
        "editor.wordWrapColumn": {
            "markdownDescription": "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.",
            "type": "integer",
            "default": 80,
            "minimum": 1,
            "maximum": 1073741824,
            "defaultDefaultValue": 80,
            "scope": 5,
            "restricted": false
        },
        "editor.wrappingIndent": {
            "type": "string",
            "enum": [
                "none",
                "same",
                "indent",
                "deepIndent"
            ],
            "enumDescriptions": [
                "No indentation. Wrapped lines begin at column 1.",
                "Wrapped lines get the same indentation as the parent.",
                "Wrapped lines get +1 indentation toward the parent.",
                "Wrapped lines get +2 indentation toward the parent."
            ],
            "description": "Controls the indentation of wrapped lines.",
            "default": "same",
            "defaultDefaultValue": "same",
            "scope": 5,
            "restricted": false
        },
        "editor.wrappingStrategy": {
            "enumDescriptions": [
                "Assumes that all characters are of the same width. This is a fast algorithm that works correctly for monospace fonts and certain scripts (like Latin characters) where glyphs are of equal width.",
                "Delegates wrapping points computation to the browser. This is a slow algorithm, that might cause freezes for large files, but it works correctly in all cases."
            ],
            "type": "string",
            "enum": [
                "simple",
                "advanced"
            ],
            "default": "simple",
            "description": "Controls the algorithm that computes wrapping points. Note that when in accessibility mode, advanced will be used for the best experience.",
            "defaultDefaultValue": "simple",
            "scope": 5,
            "restricted": false
        },
        "editor.showDeprecated": {
            "description": "Controls strikethrough deprecated variables.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "editor.inlayHints.enabled": {
            "type": "string",
            "default": "on",
            "description": "Enables the inlay hints in the editor.",
            "enum": [
                "on",
                "onUnlessPressed",
                "offUnlessPressed",
                "off"
            ],
            "markdownEnumDescriptions": [
                "Inlay hints are enabled",
                "Inlay hints are showing by default and hide when holding Ctrl+Option",
                "Inlay hints are hidden by default and show when holding Ctrl+Option",
                "Inlay hints are disabled"
            ],
            "defaultDefaultValue": "on",
            "scope": 5,
            "restricted": false
        },
        "editor.inlayHints.fontSize": {
            "type": "number",
            "default": 0,
            "markdownDescription": "Controls font size of inlay hints in the editor. As default the `#editor.fontSize#` is used when the configured value is less than `5` or greater than the editor font size.",
            "defaultDefaultValue": 0,
            "scope": 5,
            "restricted": false
        },
        "editor.inlayHints.fontFamily": {
            "type": "string",
            "default": "",
            "markdownDescription": "Controls font family of inlay hints in the editor. When set to empty, the `#editor.fontFamily#` is used.",
            "defaultDefaultValue": "",
            "scope": 5,
            "restricted": false
        },
        "editor.inlayHints.padding": {
            "type": "boolean",
            "default": false,
            "description": "Enables the padding around the inlay hints in the editor.",
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.tabFocusMode": {
            "markdownDescription": "Controls whether the editor receives tabs or defers them to the workbench for navigation.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.defaultColorDecorators": {
            "markdownDescription": "Controls whether inline color decorations should be shown using the default document color provider",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.colorDecoratorsActivatedOn": {
            "enumDescriptions": [
                "Make the color picker appear both on click and hover of the color decorator",
                "Make the color picker appear on hover of the color decorator",
                "Make the color picker appear on click of the color decorator"
            ],
            "description": "Controls the condition to make a color picker appear from a color decorator",
            "type": "string",
            "enum": [
                "clickAndHover",
                "hover",
                "click"
            ],
            "default": "clickAndHover",
            "defaultDefaultValue": "clickAndHover",
            "scope": 5,
            "restricted": false
        },
        "editor.inlineCompletionsAccessibilityVerbose": {
            "description": "Controls whether the accessibility hint should be provided to screen reader users when an inline completion is shown.",
            "type": "boolean",
            "default": false,
            "defaultDefaultValue": false,
            "scope": 5,
            "restricted": false
        },
        "editor.rename.enablePreview": {
            "scope": 5,
            "description": "Enable/disable the ability to preview changes before renaming",
            "default": true,
            "type": "boolean",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "editor.codeActionWidget.showHeaders": {
            "type": "boolean",
            "scope": 5,
            "description": "Enable/disable showing group headers in the Code Action menu.",
            "default": true,
            "defaultDefaultValue": true,
            "restricted": false
        },
        "editor.codeActionWidget.includeNearbyQuickfixes": {
            "type": "boolean",
            "scope": 5,
            "description": "Enable/disable showing nearest quickfix within a line when not currently on a diagnostic.",
            "default": false,
            "defaultDefaultValue": false,
            "restricted": false
        },
        "editor.experimental.dropIntoEditor.defaultProvider": {
            "type": "object",
            "scope": 5,
            "description": "Configures the default drop provider to use for content of a given mime type.",
            "default": {},
            "additionalProperties": {
                "type": "string"
            },
            "defaultDefaultValue": {},
            "restricted": false
        },
        "breadcrumbs.symbolSortOrder": {
            "description": "Controls how symbols are sorted in the breadcrumbs outline view.",
            "type": "string",
            "default": "position",
            "scope": 5,
            "enum": [
                "position",
                "name",
                "type"
            ],
            "enumDescriptions": [
                "Show symbol outline in file position order.",
                "Show symbol outline in alphabetical order.",
                "Show symbol outline in symbol type order."
            ],
            "defaultDefaultValue": "position",
            "restricted": false
        },
        "breadcrumbs.showFiles": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `file`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showModules": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `module`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showNamespaces": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `namespace`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showPackages": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `package`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showClasses": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `class`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showMethods": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `method`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showProperties": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `property`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showFields": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `field`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showConstructors": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `constructor`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showEnums": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `enum`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showInterfaces": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `interface`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showFunctions": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `function`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showVariables": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `variable`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showConstants": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `constant`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showStrings": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `string`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showNumbers": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `number`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showBooleans": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `boolean`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showArrays": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `array`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showObjects": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `object`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showKeys": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `key`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showNull": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `null`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showEnumMembers": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `enumMember`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showStructs": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `struct`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showEvents": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `event`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showOperators": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `operator`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "breadcrumbs.showTypeParameters": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled breadcrumbs show `typeParameter`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "editor.codeActionsOnSave": {
            "oneOf": [
                {
                    "type": "object",
                    "properties": {
                        "source.fixAll": {
                            "type": [
                                "string",
                                "boolean"
                            ],
                            "enum": [
                                "always",
                                "explicit",
                                "never",
                                true,
                                false
                            ],
                            "enumDescriptions": [
                                "Triggers Code Actions on explicit saves and auto saves triggered by window or focus changes.",
                                "Triggers Code Actions only when explicitly saved",
                                "Never triggers Code Actions on save",
                                "Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \"explicit\".",
                                "Never triggers Code Actions on save. This value will be deprecated in favor of \"never\"."
                            ],
                            "default": true,
                            "description": "Controls whether auto fix action should be run on file save."
                        }
                    },
                    "additionalProperties": {
                        "type": [
                            "string",
                            "boolean"
                        ]
                    }
                },
                {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            ],
            "markdownDescription": "Run CodeActions for the editor on save. CodeActions must be specified and the editor must not be shutting down. Example: `\"source.organizeImports\": \"explicit\" `",
            "type": [
                "object",
                "array"
            ],
            "additionalProperties": {
                "type": [
                    "string",
                    "boolean"
                ],
                "enum": [
                    "always",
                    "explicit",
                    "never",
                    true,
                    false
                ]
            },
            "default": {},
            "scope": 5,
            "defaultDefaultValue": {},
            "restricted": false,
            "properties": {
                "source.fixAll": {
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "enum": [
                        "always",
                        "explicit",
                        "never",
                        true,
                        false
                    ],
                    "enumDescriptions": [
                        "Triggers Code Actions on explicit saves and auto saves triggered by window or focus changes.",
                        "Triggers Code Actions only when explicitly saved",
                        "Never triggers Code Actions on save",
                        "Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \"explicit\".",
                        "Never triggers Code Actions on save. This value will be deprecated in favor of \"never\"."
                    ],
                    "default": true,
                    "description": "Controls whether auto fix action should be run on file save."
                },
                "source.organizeImports": {
                    "type": [
                        "string",
                        "boolean"
                    ],
                    "enum": [
                        "always",
                        "explicit",
                        "never",
                        true,
                        false
                    ],
                    "enumDescriptions": [
                        "Triggers Code Actions on explicit saves and auto saves triggered by window or focus changes.",
                        "Triggers Code Actions only when explicitly saved",
                        "Never triggers Code Actions on save",
                        "Triggers Code Actions only when explicitly saved. This value will be deprecated in favor of \"explicit\".",
                        "Never triggers Code Actions on save. This value will be deprecated in favor of \"never\"."
                    ],
                    "default": true,
                    "description": "Controls whether 'Organize Imports' actions should be run on file save."
                }
            }
        },
        "editor.defaultFoldingRangeProvider": {
            "description": "Defines a default folding range provider that takes precedence over all other folding range providers. Must be the identifier of an extension contributing a folding range provider.",
            "type": [
                "string",
                "null"
            ],
            "default": null,
            "enum": [
                null,
                "asciidoctor.asciidoctor-vscode",
                "astro-build.astro-vscode",
                "webfreak.code-d",
                "GitHub.copilot",
                "GitHub.copilot-chat",
                "ms-vscode.cpptools",
                "vscode.css-language-features",
                "tamasfe.even-better-toml",
                "golang.go",
                "karunamurti.haml",
                "vscode.html-language-features",
                "vscode.json-language-features",
                "sclu1034.justfile",
                "justusadam.language-haskell",
                "James-Yu.latex-workshop",
                "sumneko.lua",
                "vscode.markdown-language-features",
                "scalameta.metals",
                "jnoortheen.nix-ide",
                "vscode.php-language-features",
                "ms-python.python",
                "vscode.references-view",
                "rust-lang.rust-analyzer",
                "vscode.search-result",
                "svelte.svelte-vscode",
                "vknabel.swift-coverage",
                "sswg.swift-lang",
                "vscode.typescript-language-features",
                "denoland.vscode-deno",
                "dbaeumer.vscode-eslint",
                "unifiedjs.vscode-mdx",
                "ms-python.vscode-pylance",
                "redhat.vscode-yaml",
                "kamadorueda.alejandra",
                "aaron-bond.better-comments",
                "Catppuccin.catppuccin-vsc",
                "naumovs.color-highlight",
                "vscode.configuration-editing",
                "vscode.debug-auto-launch",
                "vscode.debug-server-ready",
                "mkhl.direnv",
                "vscode.emmet",
                "usernamehw.errorlens",
                "vscode.extension-editing",
                "vscode.git",
                "vscode.git-base",
                "vscode.github",
                "vscode.github-authentication",
                "GitLab.gitlab-workflow",
                "eamodio.gitlens",
                "vscode.grunt",
                "vscode.gulp",
                "vscode.ipynb",
                "vscode.jake",
                "ms-vscode.js-debug",
                "ms-vscode.js-debug-companion",
                "lunuan.kubernetes-templates",
                "vscode.markdown-math",
                "vscode.media-preview",
                "vscode.merge-conflict",
                "vscode.microsoft-authentication",
                "vscode.npm",
                "esbenp.prettier-vscode",
                "wraith13.save-vscode-schemas",
                "vscode.simple-browser",
                "ms-vscode.test-adapter-converter",
                "Gruntfuggly.todo-tree",
                "vscode.tunnel-forwarding",
                "nvarner.typst-lsp",
                "vscodevim.vim",
                "ms-vscode.vscode-js-profile-table",
                "ms-kubernetes-tools.vscode-kubernetes-tools",
                "vadimcn.vscode-lldb",
                "GitHub.vscode-pull-request-github",
                "bradlc.vscode-tailwindcss",
                "hbenl.vscode-test-explorer",
                "LeonardSSH.vscord",
                "ms-vsliveshare.vsliveshare"
            ],
            "enumItemLabels": [
                "All",
                "AsciiDoc",
                "Astro",
                "D Programming Language (code-d)",
                "GitHub Copilot",
                "GitHub Copilot Chat",
                "C/C++",
                "CSS Language Features",
                "Even Better TOML",
                "Go",
                "Better Haml",
                "HTML Language Features",
                "JSON Language Features",
                "justfile",
                "Haskell Syntax Highlighting",
                "LaTeX Workshop",
                "Lua",
                "Markdown Language Features",
                "Scala (Metals)",
                "Nix IDE",
                "PHP Language Features",
                "Python",
                "Reference Search View",
                "rust-analyzer",
                "Search Result",
                "Svelte for VS Code",
                "Swift Coverage",
                "Swift",
                "TypeScript and JavaScript Language Features",
                "Deno",
                "ESLint",
                "MDX",
                "Pylance",
                "YAML",
                "Alejandra 💅",
                "Better Comments",
                "Catppuccin for VSCode",
                "Color Highlight",
                "Configuration Editing",
                "Node Debug Auto-attach",
                "Server Ready Action",
                "direnv",
                "Emmet",
                "Error Lens",
                "Extension Authoring",
                "Git",
                "Git Base",
                "GitHub",
                "GitHub Authentication",
                "GitLab Workflow",
                "GitLens — Git supercharged",
                "Grunt support for VS Code",
                "Gulp support for VSCode",
                ".ipynb Support",
                "Jake support for VS Code",
                "JavaScript Debugger",
                "JavaScript Debugger Companion Extension",
                "Kubernetes Templates",
                "Markdown Math",
                "Media Preview",
                "Merge Conflict",
                "Microsoft Account",
                "NPM support for VS Code",
                "Prettier - Code formatter",
                "save-vscode-schemas",
                "Simple Browser",
                "Test Adapter Converter",
                "Todo Tree",
                "Local Tunnel Port Forwarding",
                "Typst LSP",
                "Vim",
                "Table Visualizer for JavaScript Profiles",
                "Kubernetes",
                "CodeLLDB",
                "GitHub Pull Requests and Issues",
                "Tailwind CSS IntelliSense",
                "Test Explorer UI",
                "Discord Rich Presence",
                "Live Share"
            ],
            "markdownEnumDescriptions": [
                "All active folding range providers",
                "Provides rich language support for AsciiDoc.",
                "Language support for Astro",
                "auto-complete, snippets, linter and formatter for dlang",
                "Your AI pair programmer",
                "AI chat features powered by Copilot",
                "C/C++ IntelliSense, debugging, and code browsing.",
                "Provides rich language support for CSS, LESS and SCSS files.",
                "Fully-featured TOML support",
                "Rich Go language support for Visual Studio Code",
                "Better Haml syntax highlighting, auto close and suggestions",
                "Provides rich language support for HTML and Handlebar files",
                "Provides rich language support for JSON files.",
                "Provides syntax and recipe launcher for Just scripts.",
                "Syntax support for the Haskell programming language.",
                "Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.",
                "Lua Language Server coded by Lua",
                "Provides rich language support for Markdown.",
                "Scala language server with rich IDE features",
                "Nix language support with formatting and error report.",
                "Provides rich language support for PHP files.",
                "IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), code formatting, refactoring, unit tests, and more.",
                "Reference Search results as separate, stable view in the sidebar",
                "Rust language support for Visual Studio Code",
                "Provides syntax highlighting and language features for tabbed search results.",
                "Svelte language support for VS Code",
                "Display coverage reports next to your code for Swift Package Manager projects.",
                "Swift Language Support for Visual Studio Code.",
                "Provides rich language support for JavaScript and TypeScript.",
                "A language server client for Deno.",
                "Integrates ESLint JavaScript into VS Code.",
                "Language support for MDX",
                "A performant, feature-rich language server for Python in VS Code",
                "YAML Language Support by Red Hat, with built-in Kubernetes syntax support",
                "The Uncompromising Nix Code Formatter",
                "Improve your code commenting by annotating with alert, informational, TODOs, and more!",
                "🦌 Soothing pastel theme for VSCode",
                "Highlight web colors in your editor",
                "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
                "Helper for auto-attach feature when node-debug extensions are not active.",
                "Open URI in browser if server under debugging is ready.",
                "unclutter your .profile",
                "Emmet support for VS Code",
                "Improve highlighting of errors, warnings and other language diagnostics.",
                "Provides linting capabilities for authoring extensions.",
                "Git SCM Integration",
                "Git static contributions and pickers.",
                "GitHub features for VS Code",
                "GitHub Authentication Provider",
                "Official GitLab-maintained extension for Visual Studio Code.",
                "Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more",
                "Extension to add Grunt capabilities to VS Code.",
                "Extension to add Gulp capabilities to VSCode.",
                "Provides basic support for opening and reading Jupyter's .ipynb notebook files",
                "Extension to add Jake capabilities to VS Code.",
                "An extension for debugging Node.js programs and Chrome.",
                "Companion extension to js-debug that provides capability for remote debugging",
                "Kubernetes Templates",
                "Adds math support to Markdown in notebooks.",
                "Provides VS Code's built-in previews for images, audio, and video",
                "Highlighting and commands for inline merge conflicts.",
                "Microsoft authentication provider",
                "Extension to add task support for npm scripts.",
                "Code formatter using prettier",
                "Save VS Code's schemas",
                "A very basic built-in webview for displaying web content.",
                "Converter extension from the Test Adapter UI to native VS Code testing",
                "Show TODO, FIXME, etc. comment tags in a tree view",
                "Allows forwarding local ports to be accessible over the internet.",
                "A language server for Typst",
                "Vim emulation for Visual Studio Code",
                "Text visualizer for profiles taken from the JavaScript debugger",
                "Develop, deploy and debug Kubernetes applications",
                "A native debugger powered by LLDB.  Debug C++, Rust and other compiled languages.",
                "Pull Request and Issue Provider for GitHub",
                "Intelligent Tailwind CSS tooling for VS Code",
                "Run your tests in the Sidebar of Visual Studio Code",
                "Highly customizable Discord Rich Presence extension for Visual Studio Code",
                "Real-time collaborative development from the comfort of your favorite tools."
            ],
            "defaultDefaultValue": null,
            "scope": 5,
            "restricted": false
        },
        "editor.defaultFormatter": {
            "description": "Defines a default formatter which takes precedence over all other formatter settings. Must be the identifier of an extension contributing a formatter.",
            "type": [
                "string",
                "null"
            ],
            "default": null,
            "enum": [
                null,
                "kamadorueda.alejandra",
                "asciidoctor.asciidoctor-vscode",
                "astro-build.astro-vscode",
                "aaron-bond.better-comments",
                "webfreak.code-d",
                "GitHub.copilot",
                "GitHub.copilot-chat",
                "ms-vscode.cpptools",
                "vscode.css-language-features",
                "tamasfe.even-better-toml",
                "golang.go",
                "karunamurti.haml",
                "vscode.html-language-features",
                "vscode.json-language-features",
                "sclu1034.justfile",
                "justusadam.language-haskell",
                "James-Yu.latex-workshop",
                "sumneko.lua",
                "vscode.markdown-language-features",
                "scalameta.metals",
                "jnoortheen.nix-ide",
                "vscode.php-language-features",
                "esbenp.prettier-vscode",
                "ms-python.python",
                "vscode.references-view",
                "rust-lang.rust-analyzer",
                "vscode.search-result",
                "svelte.svelte-vscode",
                "vknabel.swift-coverage",
                "sswg.swift-lang",
                "vscode.typescript-language-features",
                "denoland.vscode-deno",
                "dbaeumer.vscode-eslint",
                "unifiedjs.vscode-mdx",
                "ms-python.vscode-pylance",
                "redhat.vscode-yaml",
                "Catppuccin.catppuccin-vsc",
                "naumovs.color-highlight",
                "vscode.configuration-editing",
                "vscode.debug-auto-launch",
                "vscode.debug-server-ready",
                "mkhl.direnv",
                "vscode.emmet",
                "usernamehw.errorlens",
                "vscode.extension-editing",
                "vscode.git",
                "vscode.git-base",
                "vscode.github",
                "vscode.github-authentication",
                "GitLab.gitlab-workflow",
                "eamodio.gitlens",
                "vscode.grunt",
                "vscode.gulp",
                "vscode.ipynb",
                "vscode.jake",
                "ms-vscode.js-debug",
                "ms-vscode.js-debug-companion",
                "lunuan.kubernetes-templates",
                "vscode.markdown-math",
                "vscode.media-preview",
                "vscode.merge-conflict",
                "vscode.microsoft-authentication",
                "vscode.npm",
                "wraith13.save-vscode-schemas",
                "vscode.simple-browser",
                "ms-vscode.test-adapter-converter",
                "Gruntfuggly.todo-tree",
                "vscode.tunnel-forwarding",
                "nvarner.typst-lsp",
                "vscodevim.vim",
                "ms-vscode.vscode-js-profile-table",
                "ms-kubernetes-tools.vscode-kubernetes-tools",
                "vadimcn.vscode-lldb",
                "GitHub.vscode-pull-request-github",
                "bradlc.vscode-tailwindcss",
                "hbenl.vscode-test-explorer",
                "LeonardSSH.vscord",
                "ms-vsliveshare.vsliveshare"
            ],
            "enumItemLabels": [
                "None",
                "Alejandra 💅",
                "AsciiDoc",
                "Astro",
                "Better Comments",
                "D Programming Language (code-d)",
                "GitHub Copilot",
                "GitHub Copilot Chat",
                "C/C++",
                "CSS Language Features",
                "Even Better TOML",
                "Go",
                "Better Haml",
                "HTML Language Features",
                "JSON Language Features",
                "justfile",
                "Haskell Syntax Highlighting",
                "LaTeX Workshop",
                "Lua",
                "Markdown Language Features",
                "Scala (Metals)",
                "Nix IDE",
                "PHP Language Features",
                "Prettier - Code formatter",
                "Python",
                "Reference Search View",
                "rust-analyzer",
                "Search Result",
                "Svelte for VS Code",
                "Swift Coverage",
                "Swift",
                "TypeScript and JavaScript Language Features",
                "Deno",
                "ESLint",
                "MDX",
                "Pylance",
                "YAML",
                "Catppuccin for VSCode",
                "Color Highlight",
                "Configuration Editing",
                "Node Debug Auto-attach",
                "Server Ready Action",
                "direnv",
                "Emmet",
                "Error Lens",
                "Extension Authoring",
                "Git",
                "Git Base",
                "GitHub",
                "GitHub Authentication",
                "GitLab Workflow",
                "GitLens — Git supercharged",
                "Grunt support for VS Code",
                "Gulp support for VSCode",
                ".ipynb Support",
                "Jake support for VS Code",
                "JavaScript Debugger",
                "JavaScript Debugger Companion Extension",
                "Kubernetes Templates",
                "Markdown Math",
                "Media Preview",
                "Merge Conflict",
                "Microsoft Account",
                "NPM support for VS Code",
                "save-vscode-schemas",
                "Simple Browser",
                "Test Adapter Converter",
                "Todo Tree",
                "Local Tunnel Port Forwarding",
                "Typst LSP",
                "Vim",
                "Table Visualizer for JavaScript Profiles",
                "Kubernetes",
                "CodeLLDB",
                "GitHub Pull Requests and Issues",
                "Tailwind CSS IntelliSense",
                "Test Explorer UI",
                "Discord Rich Presence",
                "Live Share"
            ],
            "markdownEnumDescriptions": [
                "None",
                "The Uncompromising Nix Code Formatter",
                "Provides rich language support for AsciiDoc.",
                "Language support for Astro",
                "Improve your code commenting by annotating with alert, informational, TODOs, and more!",
                "auto-complete, snippets, linter and formatter for dlang",
                "Your AI pair programmer",
                "AI chat features powered by Copilot",
                "C/C++ IntelliSense, debugging, and code browsing.",
                "Provides rich language support for CSS, LESS and SCSS files.",
                "Fully-featured TOML support",
                "Rich Go language support for Visual Studio Code",
                "Better Haml syntax highlighting, auto close and suggestions",
                "Provides rich language support for HTML and Handlebar files",
                "Provides rich language support for JSON files.",
                "Provides syntax and recipe launcher for Just scripts.",
                "Syntax support for the Haskell programming language.",
                "Boost LaTeX typesetting efficiency with preview, compile, autocomplete, colorize, and more.",
                "Lua Language Server coded by Lua",
                "Provides rich language support for Markdown.",
                "Scala language server with rich IDE features",
                "Nix language support with formatting and error report.",
                "Provides rich language support for PHP files.",
                "Code formatter using prettier",
                "IntelliSense (Pylance), Linting, Debugging (multi-threaded, remote), code formatting, refactoring, unit tests, and more.",
                "Reference Search results as separate, stable view in the sidebar",
                "Rust language support for Visual Studio Code",
                "Provides syntax highlighting and language features for tabbed search results.",
                "Svelte language support for VS Code",
                "Display coverage reports next to your code for Swift Package Manager projects.",
                "Swift Language Support for Visual Studio Code.",
                "Provides rich language support for JavaScript and TypeScript.",
                "A language server client for Deno.",
                "Integrates ESLint JavaScript into VS Code.",
                "Language support for MDX",
                "A performant, feature-rich language server for Python in VS Code",
                "YAML Language Support by Red Hat, with built-in Kubernetes syntax support",
                "🦌 Soothing pastel theme for VSCode",
                "Highlight web colors in your editor",
                "Provides capabilities (advanced IntelliSense, auto-fixing) in configuration files like settings, launch, and extension recommendation files.",
                "Helper for auto-attach feature when node-debug extensions are not active.",
                "Open URI in browser if server under debugging is ready.",
                "unclutter your .profile",
                "Emmet support for VS Code",
                "Improve highlighting of errors, warnings and other language diagnostics.",
                "Provides linting capabilities for authoring extensions.",
                "Git SCM Integration",
                "Git static contributions and pickers.",
                "GitHub features for VS Code",
                "GitHub Authentication Provider",
                "Official GitLab-maintained extension for Visual Studio Code.",
                "Supercharge Git within VS Code — Visualize code authorship at a glance via Git blame annotations and CodeLens, seamlessly navigate and explore Git repositories, gain valuable insights via rich visualizations and powerful comparison commands, and so much more",
                "Extension to add Grunt capabilities to VS Code.",
                "Extension to add Gulp capabilities to VSCode.",
                "Provides basic support for opening and reading Jupyter's .ipynb notebook files",
                "Extension to add Jake capabilities to VS Code.",
                "An extension for debugging Node.js programs and Chrome.",
                "Companion extension to js-debug that provides capability for remote debugging",
                "Kubernetes Templates",
                "Adds math support to Markdown in notebooks.",
                "Provides VS Code's built-in previews for images, audio, and video",
                "Highlighting and commands for inline merge conflicts.",
                "Microsoft authentication provider",
                "Extension to add task support for npm scripts.",
                "Save VS Code's schemas",
                "A very basic built-in webview for displaying web content.",
                "Converter extension from the Test Adapter UI to native VS Code testing",
                "Show TODO, FIXME, etc. comment tags in a tree view",
                "Allows forwarding local ports to be accessible over the internet.",
                "A language server for Typst",
                "Vim emulation for Visual Studio Code",
                "Text visualizer for profiles taken from the JavaScript debugger",
                "Develop, deploy and debug Kubernetes applications",
                "A native debugger powered by LLDB.  Debug C++, Rust and other compiled languages.",
                "Pull Request and Issue Provider for GitHub",
                "Intelligent Tailwind CSS tooling for VS Code",
                "Run your tests in the Sidebar of Visual Studio Code",
                "Highly customizable Discord Rich Presence extension for Visual Studio Code",
                "Real-time collaborative development from the comfort of your favorite tools."
            ],
            "defaultDefaultValue": null,
            "scope": 5,
            "restricted": false
        },
        "workbench.editor.languageDetection": {
            "type": "boolean",
            "default": true,
            "description": "Controls whether the language in a text editor is automatically detected unless the language has been explicitly set by the language picker. This can also be scoped by language so you can specify which languages you do not want to be switched off of. This is useful for languages like Markdown that often contain other languages that might trick language detection into thinking it's the embedded language and not Markdown.",
            "scope": 5,
            "defaultDefaultValue": true,
            "restricted": false
        },
        "workbench.editor.restoreViewState": {
            "type": "boolean",
            "markdownDescription": "Restores the last editor view state (such as scroll position) when re-opening editors after they have been closed. Editor view state is stored per editor group and discarded when a group closes. Use the `#workbench.editor.sharedViewState#` setting to use the last known view state across all editor groups in case no previous view state was found for a editor group.",
            "default": true,
            "scope": 5,
            "defaultDefaultValue": true,
            "restricted": false
        },
        "editor.snippets.codeActions.enabled": {
            "description": "Controls if surround-with-snippets or file template snippets show as Code Actions.",
            "type": "boolean",
            "default": true,
            "defaultDefaultValue": true,
            "scope": 5,
            "restricted": false
        },
        "debug.saveBeforeStart": {
            "description": "Controls what editors to save before starting a debug session.",
            "enum": [
                "allEditorsInActiveGroup",
                "nonUntitledEditorsInActiveGroup",
                "none"
            ],
            "enumDescriptions": [
                "Save all editors in the active group before starting a debug session.",
                "Save all editors in the active group except untitled ones before starting a debug session.",
                "Don't save any editors before starting a debug session."
            ],
            "default": "allEditorsInActiveGroup",
            "scope": 5,
            "defaultDefaultValue": "allEditorsInActiveGroup",
            "restricted": false
        },
        "files.encoding": {
            "type": "string",
            "enum": [
                "utf8",
                "utf8bom",
                "utf16le",
                "utf16be",
                "windows1252",
                "iso88591",
                "iso88593",
                "iso885915",
                "macroman",
                "cp437",
                "windows1256",
                "iso88596",
                "windows1257",
                "iso88594",
                "iso885914",
                "windows1250",
                "iso88592",
                "cp852",
                "windows1251",
                "cp866",
                "iso88595",
                "koi8r",
                "koi8u",
                "iso885913",
                "windows1253",
                "iso88597",
                "windows1255",
                "iso88598",
                "iso885910",
                "iso885916",
                "windows1254",
                "iso88599",
                "windows1258",
                "gbk",
                "gb18030",
                "cp950",
                "big5hkscs",
                "shiftjis",
                "eucjp",
                "euckr",
                "windows874",
                "iso885911",
                "koi8ru",
                "koi8t",
                "gb2312",
                "cp865",
                "cp850"
            ],
            "default": "utf8",
            "description": "The default character set encoding to use when reading and writing files. This setting can also be configured per language.",
            "scope": 5,
            "enumDescriptions": [
                "UTF-8",
                "UTF-8 with BOM",
                "UTF-16 LE",
                "UTF-16 BE",
                "Western (Windows 1252)",
                "Western (ISO 8859-1)",
                "Western (ISO 8859-3)",
                "Western (ISO 8859-15)",
                "Western (Mac Roman)",
                "DOS (CP 437)",
                "Arabic (Windows 1256)",
                "Arabic (ISO 8859-6)",
                "Baltic (Windows 1257)",
                "Baltic (ISO 8859-4)",
                "Celtic (ISO 8859-14)",
                "Central European (Windows 1250)",
                "Central European (ISO 8859-2)",
                "Central European (CP 852)",
                "Cyrillic (Windows 1251)",
                "Cyrillic (CP 866)",
                "Cyrillic (ISO 8859-5)",
                "Cyrillic (KOI8-R)",
                "Cyrillic (KOI8-U)",
                "Estonian (ISO 8859-13)",
                "Greek (Windows 1253)",
                "Greek (ISO 8859-7)",
                "Hebrew (Windows 1255)",
                "Hebrew (ISO 8859-8)",
                "Nordic (ISO 8859-10)",
                "Romanian (ISO 8859-16)",
                "Turkish (Windows 1254)",
                "Turkish (ISO 8859-9)",
                "Vietnamese (Windows 1258)",
                "Simplified Chinese (GBK)",
                "Simplified Chinese (GB18030)",
                "Traditional Chinese (Big5)",
                "Traditional Chinese (Big5-HKSCS)",
                "Japanese (Shift JIS)",
                "Japanese (EUC-JP)",
                "Korean (EUC-KR)",
                "Thai (Windows 874)",
                "Latin/Thai (ISO 8859-11)",
                "Cyrillic (KOI8-RU)",
                "Tajik (KOI8-T)",
                "Simplified Chinese (GB 2312)",
                "Nordic DOS (CP 865)",
                "Western European DOS (CP 850)"
            ],
            "enumItemLabels": [
                "UTF-8",
                "UTF-8 with BOM",
                "UTF-16 LE",
                "UTF-16 BE",
                "Western (Windows 1252)",
                "Western (ISO 8859-1)",
                "Western (ISO 8859-3)",
                "Western (ISO 8859-15)",
                "Western (Mac Roman)",
                "DOS (CP 437)",
                "Arabic (Windows 1256)",
                "Arabic (ISO 8859-6)",
                "Baltic (Windows 1257)",
                "Baltic (ISO 8859-4)",
                "Celtic (ISO 8859-14)",
                "Central European (Windows 1250)",
                "Central European (ISO 8859-2)",
                "Central European (CP 852)",
                "Cyrillic (Windows 1251)",
                "Cyrillic (CP 866)",
                "Cyrillic (ISO 8859-5)",
                "Cyrillic (KOI8-R)",
                "Cyrillic (KOI8-U)",
                "Estonian (ISO 8859-13)",
                "Greek (Windows 1253)",
                "Greek (ISO 8859-7)",
                "Hebrew (Windows 1255)",
                "Hebrew (ISO 8859-8)",
                "Nordic (ISO 8859-10)",
                "Romanian (ISO 8859-16)",
                "Turkish (Windows 1254)",
                "Turkish (ISO 8859-9)",
                "Vietnamese (Windows 1258)",
                "Simplified Chinese (GBK)",
                "Simplified Chinese (GB18030)",
                "Traditional Chinese (Big5)",
                "Traditional Chinese (Big5-HKSCS)",
                "Japanese (Shift JIS)",
                "Japanese (EUC-JP)",
                "Korean (EUC-KR)",
                "Thai (Windows 874)",
                "Latin/Thai (ISO 8859-11)",
                "Cyrillic (KOI8-RU)",
                "Tajik (KOI8-T)",
                "Simplified Chinese (GB 2312)",
                "Nordic DOS (CP 865)",
                "Western European DOS (CP 850)"
            ],
            "defaultDefaultValue": "utf8",
            "restricted": false
        },
        "files.autoGuessEncoding": {
            "type": "boolean",
            "default": false,
            "markdownDescription": "When enabled, the editor will attempt to guess the character set encoding when opening files. This setting can also be configured per language. Note, this setting is not respected by text search. Only `#files.encoding#` is respected.",
            "scope": 5,
            "defaultDefaultValue": false,
            "restricted": false
        },
        "files.eol": {
            "type": "string",
            "enum": [
                "\n",
                "\r\n",
                "auto"
            ],
            "enumDescriptions": [
                "LF",
                "CRLF",
                "Uses operating system specific end of line character."
            ],
            "default": "auto",
            "description": "The default end of line character.",
            "scope": 5,
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "files.trimTrailingWhitespace": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, will trim trailing whitespace when saving a file.",
            "scope": 5,
            "defaultDefaultValue": false,
            "restricted": false
        },
        "files.insertFinalNewline": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, insert a final new line at the end of the file when saving it.",
            "scope": 5,
            "defaultDefaultValue": false,
            "restricted": false
        },
        "files.trimFinalNewlines": {
            "type": "boolean",
            "default": false,
            "description": "When enabled, will trim all new lines after the final new line at the end of the file when saving it.",
            "scope": 5,
            "defaultDefaultValue": false,
            "restricted": false
        },
        "files.saveConflictResolution": {
            "type": "string",
            "enum": [
                "askUser",
                "overwriteFileOnDisk"
            ],
            "enumDescriptions": [
                "Will refuse to save and ask for resolving the save conflict manually.",
                "Will resolve the save conflict by overwriting the file on disk with the changes in the editor."
            ],
            "description": "A save conflict can occur when a file is saved to disk that was changed by another program in the meantime. To prevent data loss, the user is asked to compare the changes in the editor with the version on disk. This setting should only be changed if you frequently encounter save conflict errors and may result in data loss if used without caution.",
            "default": "askUser",
            "scope": 5,
            "defaultDefaultValue": "askUser",
            "restricted": false
        },
        "editor.formatOnSave": {
            "type": "boolean",
            "description": "Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.",
            "scope": 5,
            "default": false,
            "restricted": false
        },
        "editor.formatOnSaveMode": {
            "type": "string",
            "default": "file",
            "enum": [
                "file",
                "modifications",
                "modificationsIfAvailable"
            ],
            "enumDescriptions": [
                "Format the whole file.",
                "Format modifications (requires source control).",
                "Will attempt to format modifications only (requires source control). If source control can't be used, then the whole file will be formatted."
            ],
            "markdownDescription": "Controls if format on save formats the whole file or only modifications. Only applies when `#editor.formatOnSave#` is enabled.",
            "scope": 5,
            "defaultDefaultValue": "file",
            "restricted": false
        },
        "outline.collapseItems": {
            "description": "Controls whether Outline items are collapsed or expanded.",
            "type": "string",
            "scope": 5,
            "enum": [
                "alwaysCollapse",
                "alwaysExpand"
            ],
            "enumDescriptions": [
                "Collapse all items.",
                "Expand all items."
            ],
            "default": "alwaysExpand",
            "defaultDefaultValue": "alwaysExpand",
            "restricted": false
        },
        "outline.showFiles": {
            "type": "boolean",
            "scope": 5,
            "default": true,
            "markdownDescription": "When enabled, Outline shows `file`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showModules": {
            "type": "boolean",
            "scope": 5,
            "default": true,
            "markdownDescription": "When enabled, Outline shows `module`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showNamespaces": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `namespace`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showPackages": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `package`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showClasses": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `class`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showMethods": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `method`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showProperties": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `property`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showFields": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `field`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showConstructors": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `constructor`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showEnums": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `enum`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showInterfaces": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `interface`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showFunctions": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `function`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showVariables": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `variable`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showConstants": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `constant`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showStrings": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `string`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showNumbers": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `number`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showBooleans": {
            "type": "boolean",
            "scope": 5,
            "default": true,
            "markdownDescription": "When enabled, Outline shows `boolean`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showArrays": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `array`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showObjects": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `object`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showKeys": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `key`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showNull": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `null`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showEnumMembers": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `enumMember`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showStructs": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `struct`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showEvents": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `event`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showOperators": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `operator`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "outline.showTypeParameters": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "When enabled, Outline shows `typeParameter`-symbols.",
            "defaultDefaultValue": true,
            "restricted": false
        },
        "emmet.showAbbreviationSuggestions": {
            "type": "boolean",
            "default": true,
            "scope": 5,
            "markdownDescription": "Shows possible Emmet abbreviations as suggestions. Not applicable in stylesheets or when emmet.showExpandedAbbreviation is set to `\"never\"`.",
            "source": {
                "id": "vscode.emmet",
                "displayName": "Emmet"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "emmet.triggerExpansionOnTab": {
            "type": "boolean",
            "default": false,
            "scope": 5,
            "markdownDescription": "When enabled, Emmet abbreviations are expanded when pressing TAB, even when completions do not show up. When disabled, completions that show up can still be accepted by pressing TAB.",
            "source": {
                "id": "vscode.emmet",
                "displayName": "Emmet"
            },
            "defaultDefaultValue": false,
            "restricted": false
        },
        "javascript.suggest.completeJSDocs": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestion to complete JSDoc comments.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.suggest.completeJSDocs": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable suggestion to complete JSDoc comments.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "javascript.suggest.jsdoc.generateReturns": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable generating `@returns` annotations for JSDoc templates.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.suggest.jsdoc.generateReturns": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable/disable generating `@returns` annotations for JSDoc templates.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "javascript.preferences.quoteStyle": {
            "type": "string",
            "enum": [
                "auto",
                "single",
                "double"
            ],
            "default": "auto",
            "markdownDescription": "Preferred quote style to use for Quick Fixes.",
            "markdownEnumDescriptions": [
                "Infer quote type from existing code",
                "Always use single quotes: `'`",
                "Always use double quotes: `\"`"
            ],
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "typescript.preferences.quoteStyle": {
            "type": "string",
            "enum": [
                "auto",
                "single",
                "double"
            ],
            "default": "auto",
            "markdownDescription": "Preferred quote style to use for Quick Fixes.",
            "markdownEnumDescriptions": [
                "Infer quote type from existing code",
                "Always use single quotes: `'`",
                "Always use double quotes: `\"`"
            ],
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "javascript.preferences.importModuleSpecifier": {
            "type": "string",
            "enum": [
                "shortest",
                "relative",
                "non-relative",
                "project-relative"
            ],
            "markdownEnumDescriptions": [
                "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
                "Prefers a relative path to the imported file location.",
                "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
                "Prefers a non-relative import only if the relative import path would leave the package or project directory."
            ],
            "default": "shortest",
            "description": "Preferred path style for auto imports.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "shortest",
            "restricted": false
        },
        "typescript.preferences.importModuleSpecifier": {
            "type": "string",
            "enum": [
                "shortest",
                "relative",
                "non-relative",
                "project-relative"
            ],
            "markdownEnumDescriptions": [
                "Prefers a non-relative import only if one is available that has fewer path segments than a relative import.",
                "Prefers a relative path to the imported file location.",
                "Prefers a non-relative import based on the `baseUrl` or `paths` configured in your `jsconfig.json` / `tsconfig.json`.",
                "Prefers a non-relative import only if the relative import path would leave the package or project directory."
            ],
            "default": "shortest",
            "description": "Preferred path style for auto imports.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "shortest",
            "restricted": false
        },
        "javascript.preferences.importModuleSpecifierEnding": {
            "type": "string",
            "enum": [
                "auto",
                "minimal",
                "index",
                "js"
            ],
            "enumItemLabels": [
                null,
                null,
                null,
                ".js / .ts"
            ],
            "markdownEnumDescriptions": [
                "Use project settings to select a default.",
                "Shorten `./component/index.js` to `./component`.",
                "Shorten `./component/index.js` to `./component/index`.",
                "Do not shorten path endings; include the `.js` or `.ts` extension."
            ],
            "default": "auto",
            "description": "Preferred path ending for auto imports.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "typescript.preferences.importModuleSpecifierEnding": {
            "type": "string",
            "enum": [
                "auto",
                "minimal",
                "index",
                "js"
            ],
            "enumItemLabels": [
                null,
                null,
                null,
                ".js / .ts"
            ],
            "markdownEnumDescriptions": [
                "Use project settings to select a default.",
                "Shorten `./component/index.js` to `./component`.",
                "Shorten `./component/index.js` to `./component/index`.",
                "Do not shorten path endings; include the `.js` or `.ts` extension."
            ],
            "default": "auto",
            "description": "Preferred path ending for auto imports.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "javascript.preferences.jsxAttributeCompletionStyle": {
            "type": "string",
            "enum": [
                "auto",
                "braces",
                "none"
            ],
            "markdownEnumDescriptions": [
                "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.",
                "Insert `={}` after attribute names.",
                "Only insert attribute names."
            ],
            "default": "auto",
            "description": "Preferred style for JSX attribute completions.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "typescript.preferences.jsxAttributeCompletionStyle": {
            "type": "string",
            "enum": [
                "auto",
                "braces",
                "none"
            ],
            "markdownEnumDescriptions": [
                "Insert `={}` or `=\"\"` after attribute names based on the prop type. See `typescript.preferences.quoteStyle` to control the type of quotes used for string attributes.",
                "Insert `={}` after attribute names.",
                "Only insert attribute names."
            ],
            "default": "auto",
            "description": "Preferred style for JSX attribute completions.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": "auto",
            "restricted": false
        },
        "javascript.preferences.renameShorthandProperties": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.preferences.renameShorthandProperties": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "deprecationMessage": "The setting 'typescript.preferences.renameShorthandProperties' has been deprecated in favor of 'typescript.preferences.useAliasesForRenames'",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "javascript.preferences.useAliasesForRenames": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.preferences.useAliasesForRenames": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable introducing aliases for object shorthand properties during renames.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "javascript.preferences.renameMatchingJsxTags": {
            "type": "boolean",
            "default": true,
            "description": "When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.preferences.renameMatchingJsxTags": {
            "type": "boolean",
            "default": true,
            "description": "When on a JSX tag, try to rename the matching tag instead of renaming the symbol. Requires using TypeScript 5.1+ in the workspace.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.autoClosingTags": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable automatic closing of JSX tags.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "javascript.autoClosingTags": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable automatic closing of JSX tags.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "javascript.suggest.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enabled/disable autocomplete suggestions.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "typescript.suggest.enabled": {
            "type": "boolean",
            "default": true,
            "description": "Enabled/disable autocomplete suggestions.",
            "scope": 5,
            "source": {
                "id": "vscode.typescript-language-features",
                "displayName": "TypeScript and JavaScript Language Features"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "tailwindCSS.suggestions": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable autocomplete suggestions.",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "tailwindCSS.hovers": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable hovers.",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "tailwindCSS.codeActions": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable code actions.",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "tailwindCSS.colorDecorators": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Controls whether the editor should render inline color decorators for Tailwind CSS classes and helper functions.",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "tailwindCSS.validate": {
            "type": "boolean",
            "default": true,
            "markdownDescription": "Enable linting. Rules can be configured individually using the `tailwindcss.lint.*` settings",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "tailwindCSS.lint.cssConflict": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "warning",
            "markdownDescription": "Class names on the same HTML element which apply the same CSS property or properties",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "warning",
            "restricted": false
        },
        "tailwindCSS.lint.invalidApply": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unsupported use of the [`@apply` directive](https://tailwindcss.com/docs/functions-and-directives/#apply)",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "error",
            "restricted": false
        },
        "tailwindCSS.lint.invalidScreen": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown screen name used with the [`@screen` directive](https://tailwindcss.com/docs/functions-and-directives/#screen)",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "error",
            "restricted": false
        },
        "tailwindCSS.lint.invalidVariant": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown variant name used with the [`@variants` directive](https://tailwindcss.com/docs/functions-and-directives/#variants)",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "error",
            "restricted": false
        },
        "tailwindCSS.lint.invalidConfigPath": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown or invalid path used with the [`theme` helper](https://tailwindcss.com/docs/functions-and-directives/#theme)",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "error",
            "restricted": false
        },
        "tailwindCSS.lint.invalidTailwindDirective": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "error",
            "markdownDescription": "Unknown value used with the [`@tailwind` directive](https://tailwindcss.com/docs/functions-and-directives/#tailwind)",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "error",
            "restricted": false
        },
        "tailwindCSS.lint.recommendedVariantOrder": {
            "type": "string",
            "enum": [
                "ignore",
                "warning",
                "error"
            ],
            "default": "warning",
            "markdownDescription": "Class variants not in the recommended order (applies in [JIT mode](https://tailwindcss.com/docs/just-in-time-mode) only)",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "defaultDefaultValue": "warning",
            "restricted": false
        },
        "tailwindCSS.experimental.classRegex": {
            "type": "array",
            "scope": 5,
            "source": {
                "id": "bradlc.vscode-tailwindcss",
                "displayName": "Tailwind CSS IntelliSense"
            },
            "default": [],
            "restricted": false
        },
        "gitlens.codeLens.scopes": {
            "type": "array",
            "default": [
                "document",
                "containers"
            ],
            "items": {
                "type": "string",
                "enum": [
                    "document",
                    "containers",
                    "blocks"
                ],
                "enumDescriptions": [
                    "Adds CodeLens at the top of the document",
                    "Adds CodeLens at the start of container-like symbols (modules, classes, interfaces, etc)",
                    "Adds CodeLens at the start of block-like symbols (functions, methods, etc) lines"
                ]
            },
            "minItems": 0,
            "maxItems": 3,
            "uniqueItems": true,
            "markdownDescription": "Specifies where Git CodeLens will be shown in the document",
            "scope": 5,
            "order": 40,
            "source": {
                "id": "eamodio.gitlens",
                "displayName": "GitLens — Git supercharged"
            },
            "defaultDefaultValue": [
                "document",
                "containers"
            ],
            "restricted": false
        },
        "gitlens.codeLens.symbolScopes": {
            "type": "array",
            "items": {
                "type": "string"
            },
            "uniqueItems": true,
            "markdownDescription": "Specifies a set of document symbols where Git CodeLens will or will not be shown in the document. Prefix with `!` to avoid providing a Git CodeLens for the symbol. Must be a member of `SymbolKind`",
            "scope": 5,
            "order": 50,
            "source": {
                "id": "eamodio.gitlens",
                "displayName": "GitLens — Git supercharged"
            },
            "default": [],
            "restricted": false
        },
        "github.copilot.editor.enableAutoCompletions": {
            "type": "boolean",
            "scope": 5,
            "default": true,
            "description": "Automatically show inline completions",
            "source": {
                "id": "GitHub.copilot",
                "displayName": "GitHub Copilot"
            },
            "defaultDefaultValue": true,
            "restricted": false
        },
        "todo-tree.regex.regex": {
            "default": "(//|#|<!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)",
            "markdownDescription": "Regular expression for matching TODOs. Note: **($TAGS)** will be replaced by the expanded tag list. For some of the extension features to work, **($TAGS)** should be present in the regex, however, the basic functionality should still work if you need to explicitly expand the tag list.",
            "type": "string",
            "minLength": 1,
            "scope": 5,
            "source": {
                "id": "Gruntfuggly.todo-tree",
                "displayName": "Todo Tree"
            },
            "defaultDefaultValue": "(//|#|<!--|;|/\\*|^|^[ \\t]*(-|\\d+.))\\s*($TAGS)",
            "restricted": false
        },
        "vim.textwidth": {
            "type": "number",
            "markdownDescription": "Width to word-wrap to when using `gq`.",
            "default": 80,
            "scope": 5,
            "minimum": 1,
            "source": {
                "id": "vscodevim.vim",
                "displayName": "Vim"
            },
            "defaultDefaultValue": 80,
            "restricted": false
        }
    },
    "patternProperties": {},
    "additionalProperties": true,
    "allowTrailingCommas": true,
    "allowComments": true
}